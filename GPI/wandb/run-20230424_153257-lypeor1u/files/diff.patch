diff --git a/Gpi/main.ipynb b/Gpi/main.ipynb
index b8191fe..162cda0 100644
--- a/Gpi/main.ipynb
+++ b/Gpi/main.ipynb
@@ -21,11 +21,12 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## TODO...\n",
+    "# TODO...\n",
     "\n",
     "- Tune hyperparameters/environment parameters to get improved results using GPI-ls\n",
     "- Decide between normalized actions or true actions\n",
-    "- Get a reference for comparing with GPI-ls results: PCN, original paper (MOFQI), ???\n"
+    "- Get a reference for comparing with GPI-ls results: PCN, original paper (MOFQI), ???\n",
+    "- Consider using [MOFQI](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) instead of TD3 in combination with gpi-ls\n"
    ]
   },
   {
@@ -38,7 +39,20 @@
     "import numpy as np\n",
     "import pandas as pd\n",
     "from matplotlib import pyplot as plt\n",
-    "from morl_baselines.multi_policy.gpi_pd.gpi_pd_continuous_action import GPIPDContinuousAction"
+    "from morl_baselines.multi_policy.gpi_pd.gpi_pd_continuous_action import GPIPDContinuousAction\n",
+    "\n",
+    "\"\"\"\n",
+    "Helper function to plot pf\n",
+    "\"\"\"\n",
+    "# TODO: add no objectives as parameter (later)\n",
+    "def plot_pf(file):\n",
+    "    columns = [\"objective_1\", \"objective_2\"]\n",
+    "    df = pd.read_csv(file, usecols=columns)\n",
+    "\n",
+    "    plt.plot(df.objective_1, df.objective_2, 'o')\n",
+    "    plt.xlabel('Cost due to excess water level wrt flooding threshold upstream')\n",
+    "    plt.ylabel('Deficit in water supply wrt demand')\n",
+    "    plt.show()"
    ]
   },
   {
@@ -55,7 +69,7 @@
     "- noise_clip = 0.005\n",
     "- rest is default\n",
     "\n",
-    "Opt for smaller policy noise due to normalized actions.\n",
+    "Opt for smaller policy noise due to normalized actions. Note: normalized actions are learned/returned by the policy and converted to true actions before being taken by the environment.\n",
     "\n",
     "Environment parameters:\n",
     "- normalized_action = True\n",
@@ -85,7 +99,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -100,14 +114,7 @@
     }
    ],
    "source": [
-    "columns = [\"objective_1\", \"objective_2\"]\n",
-    "\n",
-    "df = pd.read_csv(\"2obj_norm_lessPNoise.csv\", usecols=columns)\n",
-    "\n",
-    "plt.plot(df.objective_1, df.objective_2, 'o')\n",
-    "plt.xlabel('Cost due to excess water level wrt flooding threshold upstream')\n",
-    "plt.ylabel('Deficit in water supply wrt demand')\n",
-    "plt.show()"
+    "plot_pf('2obj_norm_lessPNoise.csv')"
    ]
   },
   {
@@ -115,7 +122,7 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "### Experiment with TD3 hyperparameters\n",
+    "## Experiment with TD3 hyperparameters: Attempt #1\n",
     "\n",
     "- net_arch = [500]\n",
     "\n",
@@ -420,12 +427,12 @@
     "\n",
     "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers', policy_noise=0.002, noise_clip=0.005, net_arch=[500])\n",
     "\n",
-    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650) #random ref_point, hv is not used in the algorithm so this does not matter for training"
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
@@ -440,14 +447,7 @@
     }
    ],
    "source": [
-    "columns = [\"objective_1\", \"objective_2\"]\n",
-    "\n",
-    "df = pd.read_csv(\"2obj_norm_lessPNoise_Hlayer500.csv\", usecols=columns)\n",
-    "\n",
-    "plt.plot(df.objective_1, df.objective_2, 'o')\n",
-    "plt.xlabel('Cost due to excess water level wrt flooding threshold upstream')\n",
-    "plt.ylabel('Deficit in water supply wrt demand')\n",
-    "plt.show()"
+    "plot_pf(\"2obj_norm_lessPNoise_Hlayer500.csv\")"
    ]
   },
   {
@@ -463,2025 +463,1873 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## PGMORL\n",
-    "\n",
-    "Works for continuous action an observation spaces.\n",
+    "### Attempt #2\n",
     "\n",
-    "Use the results of this algorithm to get a comparison for the GPI-ls algo.\n",
-    "\n",
-    "Test on normalized env first to observe performance"
+    "- net_arch = [200]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\monitoring\\video_recorder.py:182: UserWarning: \u001b[33mWARN: Unable to save last video! Did you call close()?\u001b[0m\n",
-      "  logger.warn(\"Unable to save last video! Did you call close()?\")\n",
-      "Exception ignored in: <function VideoRecorder.__del__ at 0x000001E3678AE790>\n",
-      "Traceback (most recent call last):\n",
-      "  File \"c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\monitoring\\video_recorder.py\", line 181, in __del__\n",
-      "    if not self._closed:\n",
-      "AttributeError: 'VideoRecorder' object has no attribute '_closed'\n",
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\record_video.py:79: UserWarning: \u001b[33mWARN: Overwriting existing videos at c:\\Users\\liamm\\water-resource-management\\GPI\\videos\\PGMORL_0 folder (try specifying a different `video_folder` for the `RecordVideo` wrapper if this is not desired)\u001b[0m\n",
-      "  logger.warn(\n",
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\monitoring\\video_recorder.py:62: UserWarning: \u001b[33mWARN: Disabling video recorder because environment <OrderEnforcing<DamEnv<water-reservoir-v0>>> was not initialized with any compatible video mode between `rgb_array` and `rgb_array_list`\u001b[0m\n",
-      "  logger.warn(\n",
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\mo_gymnasium\\envs\\water_reservoir\\dam_env.py:158: UserWarning: \u001b[33mWARN: You are calling render method without specifying any render mode. You can specify the render_mode at initialization, e.g. mo_gym.make(\"water-reservoir-v0\", render_mode=\"rgb_array\")\u001b[0m\n",
-      "  gym.logger.warn(\n"
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230417_202402-o000nipz</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200__None__1681755840</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -79.212  -1043.5227] to CCS.\n",
+      "Adding value: [  -84.3196 -1079.4613] to CCS.\n",
+      "Value [  -84.3196 -1079.4613] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
      ]
     },
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Warmup phase - sampled weights: [[0.  1. ]\n",
-      " [0.2 0.8]\n",
-      " [0.4 0.6]\n",
-      " [0.6 0.4]\n",
-      " [0.8 0.2]\n",
-      " [1.  0. ]]\n",
-      "Warmup iteration #0\n",
-      "SPS: 1130\n",
-      "SPS: 604\n",
-      "SPS: 420\n",
-      "SPS: 321\n",
-      "SPS: 257\n",
-      "SPS: 216\n",
-      "Warmup iteration #1\n",
-      "SPS: 372\n",
-      "SPS: 323\n",
-      "SPS: 289\n",
-      "SPS: 260\n",
-      "SPS: 237\n",
-      "SPS: 218\n",
-      "Warmup iteration #2\n",
-      "SPS: 302\n",
-      "SPS: 279\n",
-      "SPS: 256\n",
-      "SPS: 240\n",
-      "SPS: 227\n",
-      "SPS: 211\n",
-      "Warmup iteration #3\n",
-      "SPS: 262\n",
-      "SPS: 245\n",
-      "SPS: 230\n",
-      "SPS: 217\n",
-      "SPS: 208\n",
-      "SPS: 200\n",
-      "Warmup iteration #4\n",
-      "SPS: 241\n",
-      "SPS: 233\n",
-      "SPS: 225\n",
-      "SPS: 218\n",
-      "SPS: 211\n",
-      "SPS: 203\n",
-      "Warmup iteration #5\n",
-      "SPS: 233\n",
-      "SPS: 224\n",
-      "SPS: 215\n",
-      "SPS: 208\n",
-      "SPS: 201\n",
-      "SPS: 196\n",
-      "Warmup iteration #6\n",
-      "SPS: 223\n",
-      "SPS: 218\n",
-      "SPS: 213\n",
-      "SPS: 208\n",
-      "SPS: 203\n",
-      "SPS: 196\n",
-      "Warmup iteration #7\n",
-      "SPS: 217\n",
-      "SPS: 209\n",
-      "SPS: 204\n",
-      "SPS: 199\n",
-      "SPS: 194\n",
-      "SPS: 190\n",
-      "Warmup iteration #8\n",
-      "SPS: 209\n",
-      "SPS: 204\n",
-      "SPS: 200\n",
-      "SPS: 196\n",
-      "SPS: 192\n",
-      "SPS: 188\n",
-      "Warmup iteration #9\n",
-      "SPS: 205\n",
-      "SPS: 201\n",
-      "SPS: 197\n",
-      "SPS: 194\n",
-      "SPS: 190\n",
-      "SPS: 187\n",
-      "Warmup iteration #10\n",
-      "SPS: 202\n",
-      "SPS: 199\n",
-      "SPS: 196\n",
-      "SPS: 193\n",
-      "SPS: 190\n",
-      "SPS: 187\n",
-      "Warmup iteration #11\n",
-      "SPS: 201\n",
-      "SPS: 198\n",
-      "SPS: 196\n",
-      "SPS: 193\n",
-      "SPS: 190\n",
-      "SPS: 188\n",
-      "Warmup iteration #12\n",
-      "SPS: 201\n",
-      "SPS: 198\n",
-      "SPS: 196\n",
-      "SPS: 193\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "Warmup iteration #13\n",
-      "SPS: 201\n",
-      "SPS: 198\n",
-      "SPS: 196\n",
-      "SPS: 194\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "Warmup iteration #14\n",
-      "SPS: 200\n",
-      "SPS: 198\n",
-      "SPS: 196\n",
-      "SPS: 194\n",
-      "SPS: 192\n",
-      "SPS: 189\n",
-      "Warmup iteration #15\n",
-      "SPS: 200\n",
-      "SPS: 198\n",
-      "SPS: 196\n",
-      "SPS: 194\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "Warmup iteration #16\n",
-      "SPS: 199\n",
-      "SPS: 197\n",
-      "SPS: 195\n",
-      "SPS: 192\n",
-      "SPS: 190\n",
-      "SPS: 188\n",
-      "Warmup iteration #17\n",
-      "SPS: 197\n",
-      "SPS: 195\n",
-      "SPS: 193\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "SPS: 188\n",
-      "Warmup iteration #18\n",
-      "SPS: 196\n",
-      "SPS: 194\n",
-      "SPS: 192\n",
-      "SPS: 190\n",
-      "SPS: 189\n",
-      "SPS: 187\n",
-      "Warmup iteration #19\n",
-      "SPS: 195\n",
-      "SPS: 193\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "SPS: 188\n",
-      "SPS: 186\n",
-      "Warmup iteration #20\n",
-      "SPS: 194\n",
-      "SPS: 192\n",
-      "SPS: 190\n",
-      "SPS: 189\n",
-      "SPS: 187\n",
-      "SPS: 185\n",
-      "Warmup iteration #21\n",
-      "SPS: 192\n",
-      "SPS: 191\n",
-      "SPS: 189\n",
-      "SPS: 188\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "Warmup iteration #22\n",
-      "SPS: 192\n",
-      "SPS: 190\n",
-      "SPS: 188\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "Warmup iteration #23\n",
-      "SPS: 190\n",
-      "SPS: 189\n",
-      "SPS: 187\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 183\n",
-      "Warmup iteration #24\n",
-      "SPS: 189\n",
-      "SPS: 188\n",
-      "SPS: 187\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "Warmup iteration #25\n",
-      "SPS: 189\n",
-      "SPS: 188\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "Warmup iteration #26\n",
-      "SPS: 188\n",
-      "SPS: 187\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "Warmup iteration #27\n",
-      "SPS: 188\n",
-      "SPS: 187\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "Warmup iteration #28\n",
-      "SPS: 187\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "Warmup iteration #29\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "Warmup iteration #30\n",
-      "SPS: 186\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #31\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #32\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #33\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #34\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "Warmup iteration #35\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #36\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #37\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #38\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #39\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #40\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #41\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #42\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #43\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "Warmup iteration #44\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "Warmup iteration #45\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "Warmup iteration #46\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "Warmup iteration #47\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "Warmup iteration #48\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "Warmup iteration #49\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 177\n",
-      "Warmup iteration #50\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 176\n",
-      "Warmup iteration #51\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 177\n",
-      "SPS: 176\n",
-      "Warmup iteration #52\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 176\n",
-      "Warmup iteration #53\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 177\n",
-      "Warmup iteration #54\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "SPS: 177\n",
-      "Warmup iteration #55\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "Warmup iteration #56\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "SPS: 177\n",
-      "Warmup iteration #57\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "SPS: 178\n",
-      "Warmup iteration #58\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #59\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #60\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #61\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #62\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #63\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #64\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #65\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 178\n",
-      "Warmup iteration #66\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #67\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "SPS: 179\n",
-      "Warmup iteration #68\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #69\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 179\n",
-      "Warmup iteration #70\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "Warmup iteration #71\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "Warmup iteration #72\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "Warmup iteration #73\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "SPS: 180\n",
-      "Warmup iteration #74\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #75\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #76\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "Warmup iteration #77\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "Warmup iteration #78\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 180\n",
-      "Warmup iteration #79\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #0 - weights [1. 0.]\n",
-      "current eval: [-1.557  -1.5538] - estimated next: [-0.557  -1.0159] - deltas [1.     0.5379]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #1 - weights [0. 1.]\n",
-      "current eval: [-1.557  -1.5538] - estimated next: [-1.0191 -0.5538] - deltas [0.5379 1.    ]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #2 - weights [0.5 0.5]\n",
-      "current eval: [-1.557  -1.5538] - estimated next: [-0.8019 -0.7987] - deltas [0.7551 0.7551]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #3 - weights [0. 1.]\n",
-      "current eval: [-1.7099 -1.6106] - estimated next: [-1.172  -0.6106] - deltas [0.5379 1.    ]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #4 - weights [0.7 0.3]\n",
-      "current eval: [-1.557  -1.5538] - estimated next: [-0.7059 -0.8901] - deltas [0.8511 0.6636]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.557  1.5538]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [1.7099 1.6106]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.1\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.2\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.4\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "current_neighb_threshold: 0.8\n",
-      "np.abs(policy_eval): [6.4053 6.5324]\n",
-      "Agent #5 - weights [0.3 0.7]\n",
-      "current eval: [-1.557  -1.5538] - estimated next: [-0.8934 -0.7026] - deltas [0.6636 0.8511]\n",
-      "Evolutionary generation #1\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 181\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 181\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 182\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 182\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 183\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 183\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 184\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "SPS: 186\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 186\n",
-      "SPS: 186\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 186\n",
-      "SPS: 186\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 185\n",
-      "SPS: 184\n",
-      "Done training!\n"
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([  -79.212 , -1043.5227], dtype=float32)] CCS size: 1\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -74.5399 -1055.2523] to CCS.\n",
+      "Adding value: [  -87.4739 -1046.2877] to CCS.\n",
+      "Value [  -87.4739 -1046.2877] is dominated. Discarding.\n",
+      "Adding value: [  -70.9345 -1052.2025] to CCS.\n",
+      "removed value [  -74.5399 -1055.2523]\n",
+      "W_corner: [array([1., 0.]), array([0.5119, 0.4881]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -79.212 , -1043.5227], dtype=float32), array([  -70.9345, -1052.2025])] CCS size: 2\n",
+      "Next weight: [0.5119 0.4881]\n",
+      "Next weight vector: [0.5119 0.4881]\n",
+      "Adding value: [ -87.7017 -983.5114] to CCS.\n",
+      "removed value [  -79.212  -1043.5227]\n",
+      "Adding value: [  -92.5898 -1037.0446] to CCS.\n",
+      "Value [  -92.5898 -1037.0446] is dominated. Discarding.\n",
+      "Adding value: [  -86.9717 -1039.5384] to CCS.\n",
+      "Value [  -86.9717 -1039.5384] is dominated. Discarding.\n",
+      "Adding value: [ -79.9389 -963.4485] to CCS.\n",
+      "removed value [ -87.7017 -983.5114]\n",
+      "Adding value: [  -81.7442 -1050.8113] to CCS.\n",
+      "Value [  -81.7442 -1050.8113] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9079, 0.0921]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -70.9345, -1052.2025]), array([ -79.9389, -963.4485])] CCS size: 2\n",
+      "Next weight: [0.9079 0.0921]\n",
+      "Next weight vector: [0.9079 0.0921]\n",
+      "Adding value: [  -75.137  -1033.0543] to CCS.\n",
+      "Value [  -75.137  -1033.0543] is dominated. Discarding.\n",
+      "Adding value: [  -98.7073 -1075.1105] to CCS.\n",
+      "Value [  -98.7073 -1075.1105] is dominated. Discarding.\n",
+      "Adding value: [  -80.686  -1041.9122] to CCS.\n",
+      "Value [  -80.686  -1041.9122] is dominated. Discarding.\n",
+      "Adding value: [  -78.1123 -1019.2002] to CCS.\n",
+      "Value [  -78.1123 -1019.2002] is dominated. Discarding.\n",
+      "Adding value: [  -83.465  -1030.6082] to CCS.\n",
+      "Value [  -83.465  -1030.6082] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9079, 0.0921]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -70.9345, -1052.2025]), array([ -79.9389, -963.4485])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -66.6847 -1112.1306] to CCS.\n",
+      "removed value [  -70.9345 -1052.2025]\n",
+      "Adding value: [  -87.373  -1042.1463] to CCS.\n",
+      "Value [  -87.373  -1042.1463] is dominated. Discarding.\n",
+      "Adding value: [  -84.9602 -1079.6352] to CCS.\n",
+      "Value [  -84.9602 -1079.6352] is dominated. Discarding.\n",
+      "Adding value: [  -67.8415 -1041.9637] to CCS.\n",
+      "Adding value: [  -87.1668 -1048.4431] to CCS.\n",
+      "Value [  -87.1668 -1048.4431] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.8665 0.1335]\n",
+      "Next weight vector: [0.8665 0.1335]\n",
+      "Adding value: [  -91.0526 -1047.3501] to CCS.\n",
+      "Value [  -91.0526 -1047.3501] is dominated. Discarding.\n",
+      "Adding value: [  -78.7576 -1068.1292] to CCS.\n",
+      "Value [  -78.7576 -1068.1292] is dominated. Discarding.\n",
+      "Adding value: [  -92.8791 -1080.896 ] to CCS.\n",
+      "Value [  -92.8791 -1080.896 ] is dominated. Discarding.\n",
+      "Adding value: [  -77.8769 -1054.3449] to CCS.\n",
+      "Value [  -77.8769 -1054.3449] is dominated. Discarding.\n",
+      "Adding value: [ -87.1033 -991.8694] to CCS.\n",
+      "Value [ -87.1033 -991.8694] is dominated. Discarding.\n",
+      "Adding value: [  -95.8276 -1033.2121] to CCS.\n",
+      "Value [  -95.8276 -1033.2121] is dominated. Discarding.\n",
+      "Adding value: [ -81.399  -982.5044] to CCS.\n",
+      "Value [ -81.399  -982.5044] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.8665 0.1335]\n",
+      "Next weight vector: [0.8665 0.1335]\n",
+      "Adding value: [  -92.1107 -1052.9766] to CCS.\n",
+      "Value [  -92.1107 -1052.9766] is dominated. Discarding.\n",
+      "Adding value: [  -68.6115 -1083.255 ] to CCS.\n",
+      "Value [  -68.6115 -1083.255 ] is dominated. Discarding.\n",
+      "Adding value: [  -74.004 -1082.044] to CCS.\n",
+      "Value [  -74.004 -1082.044] is dominated. Discarding.\n",
+      "Adding value: [  -87.3477 -1042.0662] to CCS.\n",
+      "Value [  -87.3477 -1042.0662] is dominated. Discarding.\n",
+      "Adding value: [  -67.9268 -1057.505 ] to CCS.\n",
+      "Value [  -67.9268 -1057.505 ] is dominated. Discarding.\n",
+      "Adding value: [  -71.9235 -1041.2159] to CCS.\n",
+      "Value [  -71.9235 -1041.2159] is dominated. Discarding.\n",
+      "Adding value: [  -89.6999 -1022.3869] to CCS.\n",
+      "Value [  -89.6999 -1022.3869] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.9838 0.0162]\n",
+      "Next weight vector: [0.9838 0.0162]\n",
+      "Adding value: [  -86.7426 -1006.0194] to CCS.\n",
+      "Value [  -86.7426 -1006.0194] is dominated. Discarding.\n",
+      "Adding value: [  -87.417  -1048.3068] to CCS.\n",
+      "Value [  -87.417  -1048.3068] is dominated. Discarding.\n",
+      "Adding value: [  -89.7156 -1078.5979] to CCS.\n",
+      "Value [  -89.7156 -1078.5979] is dominated. Discarding.\n",
+      "Adding value: [  -77.589  -1039.5263] to CCS.\n",
+      "Value [  -77.589  -1039.5263] is dominated. Discarding.\n",
+      "Adding value: [  -89.7999 -1067.4481] to CCS.\n",
+      "Value [  -89.7999 -1067.4481] is dominated. Discarding.\n",
+      "Adding value: [  -87.1601 -1007.624 ] to CCS.\n",
+      "Value [  -87.1601 -1007.624 ] is dominated. Discarding.\n",
+      "Adding value: [  -65.5773 -1035.9919] to CCS.\n",
+      "removed value [  -67.8415 -1041.9637]\n",
+      "removed value [  -66.6847 -1112.1306]\n",
+      "W_corner: [array([1., 0.]), array([0.8347, 0.1653]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -65.5773, -1035.9919])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -88.0143 -1045.4799] to CCS.\n",
+      "Value [  -88.0143 -1045.4799] is dominated. Discarding.\n",
+      "Adding value: [  -84.6787 -1048.6734] to CCS.\n",
+      "Value [  -84.6787 -1048.6734] is dominated. Discarding.\n",
+      "Adding value: [  -75.1096 -1038.4683] to CCS.\n",
+      "Value [  -75.1096 -1038.4683] is dominated. Discarding.\n",
+      "Adding value: [  -86.5482 -1063.8276] to CCS.\n",
+      "Value [  -86.5482 -1063.8276] is dominated. Discarding.\n",
+      "Adding value: [  -83.8284 -1031.6924] to CCS.\n",
+      "Value [  -83.8284 -1031.6924] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.8347, 0.1653]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -65.5773, -1035.9919])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -92.7594 -1067.125 ] to CCS.\n",
+      "Value [  -92.7594 -1067.125 ] is dominated. Discarding.\n",
+      "Adding value: [  -94.2472 -1060.962 ] to CCS.\n",
+      "Value [  -94.2472 -1060.962 ] is dominated. Discarding.\n",
+      "Adding value: [  -89.5745 -1049.2308] to CCS.\n",
+      "Value [  -89.5745 -1049.2308] is dominated. Discarding.\n",
+      "Adding value: [  -74.8028 -1080.8246] to CCS.\n",
+      "Value [  -74.8028 -1080.8246] is dominated. Discarding.\n",
+      "Adding value: [  -87.1511 -1066.1293] to CCS.\n",
+      "Value [  -87.1511 -1066.1293] is dominated. Discarding.\n"
      ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▃▄█▄▃▁▂▂▆▇</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-567.36678</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200__None__1681755840</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230417_202402-o000nipz\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200', policy_noise=0.002, noise_clip=0.005, net_arch=[200])\n",
+    "\n",
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     }
    ],
    "source": [
-    "from morl_baselines.multi_policy.pgmorl.pgmorl import PGMORL\n",
+    "plot_pf(\"2obj_norm_lessPNoise_Hlayer200.csv\")"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The results are no better than in previous experiments, but we can clearly see that there is a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases.\n",
     "\n",
-    "#env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=100)\n",
+    "We can conclude that using only a single hidden layer suffices for now. Next, we can try to alter [batch size](https://openreview.net/pdf?id=B1Yy1BxCZ) or [buffer size](https://ai.stackexchange.com/questions/11640/how-large-should-the-replay-buffer-be).\n",
     "\n",
-    "PGAgent = PGMORL('water-reservoir-v0', origin=np.array([-1000.0,-1000.0]), log=False) ## log=True yields error because self.env is None...\n",
+    "## Attempt #3\n",
+    "First, try to increase the buffer size so that the network does not overfit on recent experiences.\n",
     "\n",
-    "PGAgent.train(100000, np.array([-1000.0,-1000.0]))"
+    "- net_arch = [500]\n",
+    "- buffer_size = 3650\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [
     {
-     "name": "stdout",
+     "name": "stderr",
      "output_type": "stream",
      "text": [
-      "Agent #1\n",
-      "Scalarized: -6570.624627304077\n",
-      "Discounted scalarized: -5169.428950679302\n",
-      "Vectorial: [-8888.3002 -1162.7148]\n",
-      "Discounted vectorial: [-6983.8663  -935.7418]\n"
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
      ]
     },
     {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\mo_gymnasium\\envs\\water_reservoir\\dam_env.py:158: UserWarning: \u001b[33mWARN: You are calling render method without specifying any render mode. You can specify the render_mode at initialization, e.g. mo_gym.make(\"water-reservoir-v0\", render_mode=\"rgb_array\")\u001b[0m\n",
-      "  gym.logger.warn(\n"
-     ]
-    }
-   ],
+     "data": {
+      "text/html": [
+       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230418_122106-zf8cirni</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -91.4887 -1043.3635] to CCS.\n",
+      "Adding value: [  -82.9375 -1083.8959] to CCS.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0.8258, 0.1742]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -91.4887, -1043.3635], dtype=float32), array([  -82.9375, -1083.8959], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0.8258 0.1742]\n",
+      "Next weight vector: [0.8258 0.1742]\n",
+      "Adding value: [  -83.1618 -1087.2312] to CCS.\n",
+      "Value [  -83.1618 -1087.2312] is dominated. Discarding.\n",
+      "Adding value: [  -85.7546 -1087.4425] to CCS.\n",
+      "Value [  -85.7546 -1087.4425] is dominated. Discarding.\n",
+      "Adding value: [  -84.1725 -1057.924 ] to CCS.\n",
+      "Value [  -84.1725 -1057.924 ] is dominated. Discarding.\n",
+      "Adding value: [  -78.6874 -1023.8228] to CCS.\n",
+      "removed value [  -82.9375 -1083.8959]\n",
+      "removed value [  -91.4887 -1043.3635]\n",
+      "Adding value: [  -72.5249 -1098.1948] to CCS.\n",
+      "W_corner: [array([1., 0.]), array([0.9235, 0.0765]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -78.6874, -1023.8228]), array([  -72.5249, -1098.1948])] CCS size: 2\n",
+      "Next weight: [0.9235 0.0765]\n",
+      "Next weight vector: [0.9235 0.0765]\n",
+      "Adding value: [  -70.7668 -1082.4304] to CCS.\n",
+      "removed value [  -72.5249 -1098.1948]\n",
+      "Adding value: [  -87.5697 -1072.8665] to CCS.\n",
+      "Value [  -87.5697 -1072.8665] is dominated. Discarding.\n",
+      "Adding value: [  -95.9061 -1021.7206] to CCS.\n",
+      "Adding value: [  -98.2004 -1047.9913] to CCS.\n",
+      "Value [  -98.2004 -1047.9913] is dominated. Discarding.\n",
+      "Adding value: [  -72.5381 -1061.1942] to CCS.\n",
+      "Value [  -72.5381 -1061.1942] is dominated. Discarding.\n",
+      "W_corner: [array([0.8809, 0.1191]), array([1., 0.]), array([0., 1.]), array([0.1088, 0.8912])] W_corner size: 4\n",
+      "CCS: [array([  -78.6874, -1023.8228]), array([  -70.7668, -1082.4304]), array([  -95.9061, -1021.7206])] CCS size: 3\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [  -61.2935 -1078.9337] to CCS.\n",
+      "removed value [  -70.7668 -1082.4304]\n",
+      "removed value [  -78.6874 -1023.8228]\n",
+      "Adding value: [  -75.069  -1069.3299] to CCS.\n",
+      "Value [  -75.069  -1069.3299] is dominated. Discarding.\n",
+      "Adding value: [  -71.2487 -1049.4456] to CCS.\n",
+      "Value [  -71.2487 -1049.4456] is dominated. Discarding.\n",
+      "Adding value: [  -76.3961 -1095.309 ] to CCS.\n",
+      "Value [  -76.3961 -1095.309 ] is dominated. Discarding.\n",
+      "Adding value: [  -71.3193 -1059.7824] to CCS.\n",
+      "Value [  -71.3193 -1059.7824] is dominated. Discarding.\n",
+      "Adding value: [  -74.6974 -1062.8073] to CCS.\n",
+      "Value [  -74.6974 -1062.8073] is dominated. Discarding.\n",
+      "Adding value: [  -95.0864 -1041.5788] to CCS.\n",
+      "Value [  -95.0864 -1041.5788] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.6231, 0.3769]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -95.9061, -1021.7206]), array([  -61.2935, -1078.9337])] CCS size: 2\n",
+      "Next weight: [0.6231 0.3769]\n",
+      "Next weight vector: [0.6231 0.3769]\n",
+      "Adding value: [  -80.2084 -1072.983 ] to CCS.\n",
+      "Value [  -80.2084 -1072.983 ] is dominated. Discarding.\n",
+      "Adding value: [  -90.8638 -1051.6204] to CCS.\n",
+      "Value [  -90.8638 -1051.6204] is dominated. Discarding.\n",
+      "Adding value: [  -90.5433 -1018.7755] to CCS.\n",
+      "removed value [  -95.9061 -1021.7206]\n",
+      "Adding value: [  -72.4396 -1026.0345] to CCS.\n",
+      "Adding value: [  -79.4654 -1027.9323] to CCS.\n",
+      "Value [  -79.4654 -1027.9323] is dominated. Discarding.\n",
+      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.2862, 0.7138])] W_corner size: 4\n",
+      "CCS: [array([  -61.2935, -1078.9337]), array([  -90.5433, -1018.7755]), array([  -72.4396, -1026.0345])] CCS size: 3\n",
+      "Next weight: [0.826 0.174]\n",
+      "Next weight vector: [0.826 0.174]\n",
+      "Adding value: [  -77.2351 -1051.186 ] to CCS.\n",
+      "Value [  -77.2351 -1051.186 ] is dominated. Discarding.\n",
+      "Adding value: [  -84.6875 -1052.685 ] to CCS.\n",
+      "Value [  -84.6875 -1052.685 ] is dominated. Discarding.\n",
+      "Adding value: [  -73.0153 -1060.5025] to CCS.\n",
+      "Value [  -73.0153 -1060.5025] is dominated. Discarding.\n",
+      "Adding value: [  -82.2024 -1055.3418] to CCS.\n",
+      "Value [  -82.2024 -1055.3418] is dominated. Discarding.\n",
+      "Adding value: [  -79.0316 -1071.6413] to CCS.\n",
+      "Value [  -79.0316 -1071.6413] is dominated. Discarding.\n",
+      "Adding value: [  -84.0287 -1045.6269] to CCS.\n",
+      "Value [  -84.0287 -1045.6269] is dominated. Discarding.\n",
+      "Adding value: [  -88.8499 -1012.6056] to CCS.\n",
+      "removed value [  -90.5433 -1018.7755]\n",
+      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
+      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [  -78.8052 -1060.4226] to CCS.\n",
+      "Value [  -78.8052 -1060.4226] is dominated. Discarding.\n",
+      "Adding value: [  -73.1717 -1063.9648] to CCS.\n",
+      "Value [  -73.1717 -1063.9648] is dominated. Discarding.\n",
+      "Adding value: [  -84.5917 -1061.2625] to CCS.\n",
+      "Value [  -84.5917 -1061.2625] is dominated. Discarding.\n",
+      "Adding value: [  -76.4639 -1066.2845] to CCS.\n",
+      "Value [  -76.4639 -1066.2845] is dominated. Discarding.\n",
+      "Adding value: [ -103.2944 -1043.9017] to CCS.\n",
+      "Value [ -103.2944 -1043.9017] is dominated. Discarding.\n",
+      "Adding value: [  -66.4684 -1074.1776] to CCS.\n",
+      "Value [  -66.4684 -1074.1776] is dominated. Discarding.\n",
+      "Adding value: [  -85.4805 -1073.3403] to CCS.\n",
+      "Value [  -85.4805 -1073.3403] is dominated. Discarding.\n",
+      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
+      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
+      "Next weight: [0.45 0.55]\n",
+      "Next weight vector: [0.45 0.55]\n",
+      "Adding value: [  -81.1672 -1044.4494] to CCS.\n",
+      "Value [  -81.1672 -1044.4494] is dominated. Discarding.\n",
+      "Adding value: [  -81.9442 -1070.6108] to CCS.\n",
+      "Value [  -81.9442 -1070.6108] is dominated. Discarding.\n",
+      "Adding value: [  -96.5051 -1045.6222] to CCS.\n",
+      "Value [  -96.5051 -1045.6222] is dominated. Discarding.\n",
+      "Adding value: [  -83.2376 -1088.5272] to CCS.\n",
+      "Value [  -83.2376 -1088.5272] is dominated. Discarding.\n",
+      "Adding value: [  -80.0558 -1077.7388] to CCS.\n",
+      "Value [  -80.0558 -1077.7388] is dominated. Discarding.\n",
+      "Adding value: [  -70.7796 -1076.772 ] to CCS.\n",
+      "Value [  -70.7796 -1076.772 ] is dominated. Discarding.\n",
+      "Adding value: [  -75.5809 -1040.8647] to CCS.\n",
+      "Value [  -75.5809 -1040.8647] is dominated. Discarding.\n",
+      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
+      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -74.6747 -1038.1342] to CCS.\n",
+      "Value [  -74.6747 -1038.1342] is dominated. Discarding.\n",
+      "Adding value: [  -87.3841 -1023.9272] to CCS.\n",
+      "Value [  -87.3841 -1023.9272] is dominated. Discarding.\n",
+      "Adding value: [  -82.8854 -1079.9265] to CCS.\n",
+      "Value [  -82.8854 -1079.9265] is dominated. Discarding.\n",
+      "Adding value: [  -78.1681 -1077.8876] to CCS.\n",
+      "Value [  -78.1681 -1077.8876] is dominated. Discarding.\n",
+      "Adding value: [  -95.8899 -1021.4416] to CCS.\n",
+      "Value [  -95.8899 -1021.4416] is dominated. Discarding.\n",
+      "Adding value: [  -88.3077 -1037.5199] to CCS.\n",
+      "Value [  -88.3077 -1037.5199] is dominated. Discarding.\n",
+      "Adding value: [  -82.4825 -1019.1509] to CCS.\n",
+      "Value [  -82.4825 -1019.1509] is dominated. Discarding.\n",
+      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
+      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -80.0987 -1004.3626] to CCS.\n",
+      "removed value [  -88.8499 -1012.6056]\n",
+      "Adding value: [  -64.9331 -1075.9121] to CCS.\n",
+      "Value [  -64.9331 -1075.9121] is dominated. Discarding.\n",
+      "Adding value: [  -78.6876 -1025.3916] to CCS.\n",
+      "Value [  -78.6876 -1025.3916] is dominated. Discarding.\n",
+      "Adding value: [  -88.8268 -1030.7416] to CCS.\n",
+      "Value [  -88.8268 -1030.7416] is dominated. Discarding.\n",
+      "Adding value: [  -71.1392 -1029.3756] to CCS.\n",
+      "removed value [  -72.4396 -1026.0345]\n",
+      "Adding value: [  -74.8615 -1118.2019] to CCS.\n",
+      "Value [  -74.8615 -1118.2019] is dominated. Discarding.\n",
+      "Adding value: [  -88.6611 -1072.6236] to CCS.\n",
+      "Value [  -88.6611 -1072.6236] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▅▇▆▁▆█▄▆▆▇</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-567.61581</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230418_122106-zf8cirni\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650', policy_noise=0.002, noise_clip=0.005, net_arch=[500], buffer_size=3650)\n",
+    "\n",
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_pf('2obj_norm_lessPNoise_Hlayer200buffer3650.csv')"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The resulting CCS is very similar to the previous."
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Comparison with original paper\n",
+    "\n",
+    "In [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) an experiment on the same simulated dam environment was conducted. Their results are a lot better, but the environment was only simulated for 100 timesteps/episode instead of the 365 used here.\n",
+    "\n",
+    "We now conduct an experiment to test the randomness of the environment and see if this influences the mean utility. In order to test this, evaluate the policy for significantly more episodes (50) \n",
+    "\n",
+    "In order to reduce training time, set time_limit = 100"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230419_123229-4usbm15l</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/4usbm15l' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681900345</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/4usbm15l' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/4usbm15l</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -89.0323 -671.4115] to CCS.\n",
+      "Adding value: [ -55.1178 -676.9745] to CCS.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0.1409, 0.8591]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -89.0323, -671.4115], dtype=float32), array([ -55.1178, -676.9745], dtype=float32)] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -54.2932 -685.0519] to CCS.\n",
+      "removed value [ -55.1178 -676.9745]\n",
+      "Adding value: [ -55.3127 -681.4085] to CCS.\n",
+      "Value [ -55.3127 -681.4085] is dominated. Discarding.\n",
+      "Adding value: [ -49.0894 -688.355 ] to CCS.\n",
+      "removed value [ -54.2932 -685.0519]\n",
+      "Adding value: [ -57.5461 -687.8972] to CCS.\n",
+      "Value [ -57.5461 -687.8972] is dominated. Discarding.\n",
+      "Adding value: [ -55.1078 -675.7437] to CCS.\n",
+      "W_corner: [array([0.6769, 0.3231]), array([1., 0.]), array([0., 1.]), array([0.1132, 0.8868])] W_corner size: 4\n",
+      "CCS: [array([ -89.0323, -671.4115], dtype=float32), array([ -49.0894, -688.355 ]), array([ -55.1078, -675.7437])] CCS size: 3\n",
+      "Next weight: [0.6769 0.3231]\n",
+      "Next weight vector: [0.6769 0.3231]\n",
+      "Adding value: [ -49.3499 -692.3153] to CCS.\n",
+      "Value [ -49.3499 -692.3153] is dominated. Discarding.\n",
+      "Adding value: [ -53.4295 -679.3743] to CCS.\n",
+      "Value [ -53.4295 -679.3743] is dominated. Discarding.\n",
+      "Adding value: [ -54.7228 -670.1054] to CCS.\n",
+      "removed value [ -55.1078 -675.7437]\n",
+      "removed value [ -89.0323 -671.4115]\n",
+      "Adding value: [ -52.3608 -689.7825] to CCS.\n",
+      "Value [ -52.3608 -689.7825] is dominated. Discarding.\n",
+      "Adding value: [ -51.8035 -679.4033] to CCS.\n",
+      "Value [ -51.8035 -679.4033] is dominated. Discarding.\n",
+      "Adding value: [ -50.7335 -692.4804] to CCS.\n",
+      "Value [ -50.7335 -692.4804] is dominated. Discarding.\n",
+      "Adding value: [ -51.1455 -698.3723] to CCS.\n",
+      "Value [ -51.1455 -698.3723] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.7641, 0.2359]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -49.0894, -688.355 ]), array([ -54.7228, -670.1054])] CCS size: 2\n",
+      "Next weight: [0.7641 0.2359]\n",
+      "Next weight vector: [0.7641 0.2359]\n",
+      "Adding value: [ -55.5795 -677.1124] to CCS.\n",
+      "Value [ -55.5795 -677.1124] is dominated. Discarding.\n",
+      "Adding value: [ -54.0273 -675.8669] to CCS.\n",
+      "Value [ -54.0273 -675.8669] is dominated. Discarding.\n",
+      "Adding value: [ -53.1458 -672.7096] to CCS.\n",
+      "Adding value: [ -49.0475 -672.8772] to CCS.\n",
+      "removed value [ -53.1458 -672.7096]\n",
+      "removed value [ -49.0894 -688.355 ]\n",
+      "Adding value: [ -58.3215 -676.9029] to CCS.\n",
+      "Value [ -58.3215 -676.9029] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.3281, 0.6719]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -48.3716 -701.7438] to CCS.\n",
+      "Adding value: [ -51.7598 -683.8626] to CCS.\n",
+      "Value [ -51.7598 -683.8626] is dominated. Discarding.\n",
+      "Adding value: [ -57.0385 -670.0296] to CCS.\n",
+      "Adding value: [ -54.534 -692.057] to CCS.\n",
+      "Value [ -54.534 -692.057] is dominated. Discarding.\n",
+      "Adding value: [ -53.4287 -694.926 ] to CCS.\n",
+      "Value [ -53.4287 -694.926 ] is dominated. Discarding.\n",
+      "W_corner: [array([0.3281, 0.6719]), array([1., 0.]), array([0.9771, 0.0229]), array([0., 1.]), array([0.0317, 0.9683])] W_corner size: 5\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772]), array([ -48.3716, -701.7438]), array([ -57.0385, -670.0296])] CCS size: 4\n",
+      "Next weight: [0.3281 0.6719]\n",
+      "Next weight vector: [0.3281 0.6719]\n",
+      "Adding value: [ -53.7422 -680.6706] to CCS.\n",
+      "Value [ -53.7422 -680.6706] is dominated. Discarding.\n",
+      "Adding value: [ -49.4854 -700.9863] to CCS.\n",
+      "Value [ -49.4854 -700.9863] is dominated. Discarding.\n",
+      "Adding value: [ -52.5809 -696.9468] to CCS.\n",
+      "Value [ -52.5809 -696.9468] is dominated. Discarding.\n",
+      "Adding value: [ -54.5176 -684.0378] to CCS.\n",
+      "Value [ -54.5176 -684.0378] is dominated. Discarding.\n",
+      "Adding value: [ -53.3216 -679.547 ] to CCS.\n",
+      "Value [ -53.3216 -679.547 ] is dominated. Discarding.\n",
+      "Adding value: [ -53.5796 -679.4865] to CCS.\n",
+      "Value [ -53.5796 -679.4865] is dominated. Discarding.\n",
+      "Adding value: [ -54.5266 -678.0507] to CCS.\n",
+      "Value [ -54.5266 -678.0507] is dominated. Discarding.\n",
+      "Adding value: [ -51.5531 -684.4262] to CCS.\n",
+      "Value [ -51.5531 -684.4262] is dominated. Discarding.\n",
+      "Adding value: [ -54.1632 -680.5609] to CCS.\n",
+      "Value [ -54.1632 -680.5609] is dominated. Discarding.\n",
+      "W_corner: [array([0.3281, 0.6719]), array([1., 0.]), array([0.9771, 0.0229]), array([0., 1.]), array([0.0317, 0.9683])] W_corner size: 5\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772]), array([ -48.3716, -701.7438]), array([ -57.0385, -670.0296])] CCS size: 4\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -54.7385 -693.702 ] to CCS.\n",
+      "Value [ -54.7385 -693.702 ] is dominated. Discarding.\n",
+      "Adding value: [ -56.1256 -676.915 ] to CCS.\n",
+      "Value [ -56.1256 -676.915 ] is dominated. Discarding.\n",
+      "Adding value: [ -50.4099 -683.4293] to CCS.\n",
+      "Value [ -50.4099 -683.4293] is dominated. Discarding.\n",
+      "Adding value: [ -50.9717 -690.4385] to CCS.\n",
+      "Value [ -50.9717 -690.4385] is dominated. Discarding.\n",
+      "Adding value: [ -53.9754 -687.7221] to CCS.\n",
+      "Value [ -53.9754 -687.7221] is dominated. Discarding.\n",
+      "Adding value: [ -52.3632 -686.3835] to CCS.\n",
+      "Value [ -52.3632 -686.3835] is dominated. Discarding.\n",
+      "Adding value: [ -53.9689 -681.0283] to CCS.\n",
+      "Value [ -53.9689 -681.0283] is dominated. Discarding.\n",
+      "Adding value: [ -51.5402 -687.8578] to CCS.\n",
+      "Value [ -51.5402 -687.8578] is dominated. Discarding.\n",
+      "Adding value: [ -50.8251 -703.0985] to CCS.\n",
+      "Value [ -50.8251 -703.0985] is dominated. Discarding.\n",
+      "W_corner: [array([0.3281, 0.6719]), array([1., 0.]), array([0.9771, 0.0229]), array([0., 1.]), array([0.0317, 0.9683])] W_corner size: 5\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772]), array([ -48.3716, -701.7438]), array([ -57.0385, -670.0296])] CCS size: 4\n",
+      "Next weight: [0.9771 0.0229]\n",
+      "Next weight vector: [0.9771 0.0229]\n",
+      "Adding value: [ -52.931  -679.7544] to CCS.\n",
+      "Value [ -52.931  -679.7544] is dominated. Discarding.\n",
+      "Adding value: [ -53.1855 -684.5713] to CCS.\n",
+      "Value [ -53.1855 -684.5713] is dominated. Discarding.\n",
+      "Adding value: [ -56.4789 -677.4179] to CCS.\n",
+      "Value [ -56.4789 -677.4179] is dominated. Discarding.\n",
+      "Adding value: [ -52.0494 -683.2111] to CCS.\n",
+      "Value [ -52.0494 -683.2111] is dominated. Discarding.\n",
+      "Adding value: [ -54.7234 -686.4755] to CCS.\n",
+      "Value [ -54.7234 -686.4755] is dominated. Discarding.\n",
+      "Adding value: [ -50.8708 -685.9434] to CCS.\n",
+      "Value [ -50.8708 -685.9434] is dominated. Discarding.\n",
+      "Adding value: [ -52.3085 -684.6133] to CCS.\n",
+      "Value [ -52.3085 -684.6133] is dominated. Discarding.\n",
+      "Adding value: [ -51.7578 -680.1619] to CCS.\n",
+      "Value [ -51.7578 -680.1619] is dominated. Discarding.\n",
+      "Adding value: [ -50.4128 -686.0131] to CCS.\n",
+      "Value [ -50.4128 -686.0131] is dominated. Discarding.\n",
+      "W_corner: [array([0.3281, 0.6719]), array([1., 0.]), array([0.9771, 0.0229]), array([0., 1.]), array([0.0317, 0.9683])] W_corner size: 5\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772]), array([ -48.3716, -701.7438]), array([ -57.0385, -670.0296])] CCS size: 4\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -54.9248 -673.4314] to CCS.\n",
+      "Value [ -54.9248 -673.4314] is dominated. Discarding.\n",
+      "Adding value: [ -56.5629 -684.388 ] to CCS.\n",
+      "Value [ -56.5629 -684.388 ] is dominated. Discarding.\n",
+      "Adding value: [ -53.337 -679.117] to CCS.\n",
+      "Value [ -53.337 -679.117] is dominated. Discarding.\n",
+      "Adding value: [ -58.2896 -680.4126] to CCS.\n",
+      "Value [ -58.2896 -680.4126] is dominated. Discarding.\n",
+      "Adding value: [ -53.9783 -673.1612] to CCS.\n",
+      "Value [ -53.9783 -673.1612] is dominated. Discarding.\n",
+      "Adding value: [ -50.5172 -687.5254] to CCS.\n",
+      "Value [ -50.5172 -687.5254] is dominated. Discarding.\n",
+      "Adding value: [ -54.2515 -690.2296] to CCS.\n",
+      "Value [ -54.2515 -690.2296] is dominated. Discarding.\n",
+      "Adding value: [ -56.4475 -672.0362] to CCS.\n",
+      "Value [ -56.4475 -672.0362] is dominated. Discarding.\n",
+      "Adding value: [ -54.5296 -694.5684] to CCS.\n",
+      "Value [ -54.5296 -694.5684] is dominated. Discarding.\n",
+      "W_corner: [array([0.3281, 0.6719]), array([1., 0.]), array([0.9771, 0.0229]), array([0., 1.]), array([0.0317, 0.9683])] W_corner size: 5\n",
+      "CCS: [array([ -54.7228, -670.1054]), array([ -49.0475, -672.8772]), array([ -48.3716, -701.7438]), array([ -57.0385, -670.0296])] CCS size: 4\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -53.8308 -693.3694] to CCS.\n",
+      "Value [ -53.8308 -693.3694] is dominated. Discarding.\n",
+      "Adding value: [ -54.1552 -675.191 ] to CCS.\n",
+      "Value [ -54.1552 -675.191 ] is dominated. Discarding.\n",
+      "Adding value: [ -55.8017 -667.4108] to CCS.\n",
+      "removed value [ -57.0385 -670.0296]\n",
+      "removed value [ -54.7228 -670.1054]\n",
+      "Adding value: [ -54.3141 -676.8451] to CCS.\n",
+      "Value [ -54.3141 -676.8451] is dominated. Discarding.\n",
+      "Adding value: [ -52.5072 -680.4767] to CCS.\n",
+      "Value [ -52.5072 -680.4767] is dominated. Discarding.\n",
+      "Adding value: [ -53.4574 -688.8243] to CCS.\n",
+      "Value [ -53.4574 -688.8243] is dominated. Discarding.\n",
+      "Adding value: [ -55.8628 -682.0411] to CCS.\n",
+      "Value [ -55.8628 -682.0411] is dominated. Discarding.\n",
+      "Adding value: [ -52.0489 -689.905 ] to CCS.\n",
+      "Value [ -52.0489 -689.905 ] is dominated. Discarding.\n",
+      "Adding value: [ -51.7262 -679.401 ] to CCS.\n",
+      "Value [ -51.7262 -679.401 ] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▄▁▂▁▂▁▂▄▇█</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-369.20566</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681900345</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/4usbm15l' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/4usbm15l</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230419_123229-4usbm15l\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=100)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650', policy_noise=0.002, noise_clip=0.005, net_arch=[500])\n",
+    "\n",
+    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=10000, eval_freq=1000, num_eval_episodes_for_front=50)"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "When looking at the eval/mean utilty graph over time, the mean utility rises, but this is on a very small scale: an increase of +.200. \n",
+    "\n",
+    "Next, let's try to increase policy noise a bit more and increase the tau value, as described [here](https://spinningup.openai.com/en/latest/algorithms/td3.html) the tau value is often close to 1. This might fix learning..."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.15.0 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230420_121848-a6f57djc</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/a6f57djc' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessHiddenLayers500_tau09__None__1681985925</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/a6f57djc' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/a6f57djc</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessHiddenLayers500_tau09\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-5650.834   -756.8445] to CCS.\n",
+      "Adding value: [-5640.9175  -763.2785] to CCS.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0.3935, 0.6065]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-5650.834 ,  -756.8445], dtype=float32), array([-5640.9175,  -763.2785], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-5679.2695  -731.9519] to CCS.\n",
+      "removed value [-5650.834   -756.8445]\n",
+      "Adding value: [-5693.13    -722.0276] to CCS.\n",
+      "removed value [-5679.2695  -731.9519]\n",
+      "Adding value: [-5643.2331  -756.922 ] to CCS.\n",
+      "Value [-5643.2331  -756.922 ] is dominated. Discarding.\n",
+      "Adding value: [-5681.5516  -728.848 ] to CCS.\n",
+      "Adding value: [-5667.1394  -738.1204] to CCS.\n",
+      "removed value [-5681.5516  -728.848 ]\n",
+      "W_corner: [array([0.4896, 0.5104]), array([1., 0.]), array([0., 1.]), array([0.3824, 0.6176])] W_corner size: 4\n",
+      "CCS: [array([-5640.9175,  -763.2785], dtype=float32), array([-5693.13  ,  -722.0276], dtype=float32), array([-5667.1394,  -738.1204])] CCS size: 3\n",
+      "Next weight: [0.4896 0.5104]\n",
+      "Next weight vector: [0.4896 0.5104]\n",
+      "Adding value: [-5652.314   -751.9793] to CCS.\n",
+      "Value [-5652.314   -751.9793] is dominated. Discarding.\n",
+      "Adding value: [-5669.412   -738.5309] to CCS.\n",
+      "Value [-5669.412   -738.5309] is dominated. Discarding.\n",
+      "Adding value: [-5668.2446  -739.5166] to CCS.\n",
+      "Value [-5668.2446  -739.5166] is dominated. Discarding.\n",
+      "Adding value: [-5681.0244  -734.0018] to CCS.\n",
+      "Value [-5681.0244  -734.0018] is dominated. Discarding.\n",
+      "Adding value: [-5670.5279  -738.578 ] to CCS.\n",
+      "Value [-5670.5279  -738.578 ] is dominated. Discarding.\n",
+      "Adding value: [-5664.9104  -746.1834] to CCS.\n",
+      "Value [-5664.9104  -746.1834] is dominated. Discarding.\n",
+      "Adding value: [-5651.0212  -752.9294] to CCS.\n"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-2-9991131f8f79>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mGPIAgent\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mGPIPDContinuousAction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mper\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdyna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexperiment_name\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'gpi-ls_2_obj_NormAction_lessHiddenLayers500_tau09'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtau\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.9\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpolicy_noise\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnoise_clip\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.05\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnet_arch\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m500\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mGPIAgent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m100000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mref_point\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimesteps_per_iter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_freq\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m50\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36mtrain\u001b[1;34m(self, total_timesteps, eval_env, ref_point, known_pareto_front, num_eval_weights_for_front, num_eval_episodes_for_front, weight_selection_algo, timesteps_per_iter, eval_freq)\u001b[0m\n\u001b[0;32m    650\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    651\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 652\u001b[1;33m                 gpi_returns_test_tasks = [\n\u001b[0m\u001b[0;32m    653\u001b[0m                     \u001b[0mpolicy_evaluation_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mew\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mew\u001b[0m \u001b[1;32min\u001b[0m \u001b[0meval_weights\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    654\u001b[0m                 ]\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    651\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    652\u001b[0m                 gpi_returns_test_tasks = [\n\u001b[1;32m--> 653\u001b[1;33m                     \u001b[0mpolicy_evaluation_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mew\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mew\u001b[0m \u001b[1;32min\u001b[0m \u001b[0meval_weights\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    654\u001b[0m                 ]\n\u001b[0;32m    655\u001b[0m                 log_all_multi_policy_metrics(\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36mpolicy_evaluation_mo\u001b[1;34m(agent, env, w, rep)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36meval_mo\u001b[1;34m(agent, env, w, scalarization, render)\u001b[0m\n\u001b[0;32m     32\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mrender\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m             \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m         \u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mterminated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minfo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m         \u001b[0mdone\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mterminated\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[0mvec_return\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\autograd\\grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     25\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 27\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     28\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mF\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36meval\u001b[1;34m(self, obs, w, torch_action)\u001b[0m\n\u001b[0;32m    450\u001b[0m         \u001b[1;34m\"\"\"Evaluate the policy action for the given observation and weight vector.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    451\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 452\u001b[1;33m             \u001b[0mobs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    453\u001b[0m             \u001b[0mw\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    454\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=100)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessHiddenLayers500_tau09', policy_noise=0.1, noise_clip=0.05, net_arch=[256,256,256])\n",
+    "\n",
+    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=10000, eval_freq=1000, num_eval_episodes_for_front=50)"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Try using non-normalized actions\n",
+    "\n",
+    "manually place upper bound on the action space:\n",
+    "- Upper bound = 250.0"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230418_194806-tgq6y5r0</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/tgq6y5r0' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_lessPolicyNoise_HiddenLayers500__None__1681840083</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/tgq6y5r0' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/tgq6y5r0</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_lessPolicyNoise_HiddenLayers500\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-12397.65   -4948.626] to CCS.\n",
+      "Adding value: [-12483.838  -4945.706] to CCS.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0.0328, 0.9672]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12483.838,  -4945.706], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0.0328 0.9672]\n",
+      "Next weight vector: [0.0328 0.9672]\n",
+      "Adding value: [-12619.363   -4946.7876] to CCS.\n",
+      "Value [-12619.363   -4946.7876] is dominated. Discarding.\n",
+      "Adding value: [-12611.654  -4953.161] to CCS.\n",
+      "Value [-12611.654  -4953.161] is dominated. Discarding.\n",
+      "Adding value: [-12418.7115  -4952.4461] to CCS.\n",
+      "Value [-12418.7115  -4952.4461] is dominated. Discarding.\n",
+      "Adding value: [-12542.6963  -4947.5971] to CCS.\n",
+      "Value [-12542.6963  -4947.5971] is dominated. Discarding.\n",
+      "Adding value: [-12699.2445  -4961.5944] to CCS.\n",
+      "Value [-12699.2445  -4961.5944] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.0328, 0.9672]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12483.838,  -4945.706], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-12571.225   -4958.2397] to CCS.\n",
+      "Value [-12571.225   -4958.2397] is dominated. Discarding.\n",
+      "Adding value: [-12564.259   -4956.2544] to CCS.\n",
+      "Value [-12564.259   -4956.2544] is dominated. Discarding.\n",
+      "Adding value: [-12587.7312  -4953.9713] to CCS.\n",
+      "Value [-12587.7312  -4953.9713] is dominated. Discarding.\n",
+      "Adding value: [-12580.9375  -4955.3169] to CCS.\n",
+      "Value [-12580.9375  -4955.3169] is dominated. Discarding.\n",
+      "Adding value: [-12481.0927  -4951.5988] to CCS.\n",
+      "Value [-12481.0927  -4951.5988] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.0328, 0.9672]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12483.838,  -4945.706], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0.0328 0.9672]\n",
+      "Next weight vector: [0.0328 0.9672]\n",
+      "Adding value: [-12496.588   -4951.8096] to CCS.\n",
+      "Value [-12496.588   -4951.8096] is dominated. Discarding.\n",
+      "Adding value: [-12548.604   -4952.9785] to CCS.\n",
+      "Value [-12548.604   -4952.9785] is dominated. Discarding.\n",
+      "Adding value: [-12511.8068  -4946.7278] to CCS.\n",
+      "Value [-12511.8068  -4946.7278] is dominated. Discarding.\n",
+      "Adding value: [-12642.3589  -4958.2303] to CCS.\n",
+      "Value [-12642.3589  -4958.2303] is dominated. Discarding.\n",
+      "Adding value: [-12582.6586  -4959.6156] to CCS.\n",
+      "Value [-12582.6586  -4959.6156] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.0328, 0.9672]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12483.838,  -4945.706], dtype=float32)] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-12614.799   -4951.6035] to CCS.\n",
+      "Value [-12614.799   -4951.6035] is dominated. Discarding.\n",
+      "Adding value: [-12553.63    -4954.2993] to CCS.\n",
+      "Value [-12553.63    -4954.2993] is dominated. Discarding.\n",
+      "Adding value: [-12591.58    -4949.2026] to CCS.\n",
+      "Value [-12591.58    -4949.2026] is dominated. Discarding.\n",
+      "Adding value: [-12517.8392  -4955.7855] to CCS.\n",
+      "Value [-12517.8392  -4955.7855] is dominated. Discarding.\n",
+      "Adding value: [-12554.3027  -4944.6091] to CCS.\n",
+      "removed value [-12483.838  -4945.706]\n",
+      "W_corner: [array([1., 0.]), array([0.025, 0.975]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12554.3027,  -4944.6091])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-12476.235  -4943.536] to CCS.\n",
+      "removed value [-12554.3027  -4944.6091]\n",
+      "Adding value: [-12630.7455  -4952.1882] to CCS.\n",
+      "Value [-12630.7455  -4952.1882] is dominated. Discarding.\n",
+      "Adding value: [-12583.4637  -4957.0098] to CCS.\n",
+      "Value [-12583.4637  -4957.0098] is dominated. Discarding.\n",
+      "Adding value: [-12682.8838  -4952.4915] to CCS.\n",
+      "Value [-12682.8838  -4952.4915] is dominated. Discarding.\n",
+      "Adding value: [-12608.276   -4940.9272] to CCS.\n",
+      "W_corner: [array([0.0608, 0.9392]), array([1., 0.]), array([0., 1.]), array([0.0194, 0.9806])] W_corner size: 4\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12476.235,  -4943.536], dtype=float32), array([-12608.276 ,  -4940.9272])] CCS size: 3\n",
+      "Next weight: [0.0608 0.9392]\n",
+      "Next weight vector: [0.0608 0.9392]\n",
+      "Adding value: [-12604.457  -4963.169] to CCS.\n",
+      "Value [-12604.457  -4963.169] is dominated. Discarding.\n",
+      "Adding value: [-12530.286   -4944.5576] to CCS.\n",
+      "Value [-12530.286   -4944.5576] is dominated. Discarding.\n",
+      "Adding value: [-12584.1484  -4964.1012] to CCS.\n",
+      "Value [-12584.1484  -4964.1012] is dominated. Discarding.\n",
+      "Adding value: [-12520.8757  -4961.3463] to CCS.\n",
+      "Value [-12520.8757  -4961.3463] is dominated. Discarding.\n",
+      "Adding value: [-12553.8471  -4954.7345] to CCS.\n",
+      "Value [-12553.8471  -4954.7345] is dominated. Discarding.\n",
+      "Adding value: [-12622.2279  -4945.293 ] to CCS.\n",
+      "Value [-12622.2279  -4945.293 ] is dominated. Discarding.\n",
+      "Adding value: [-12623.0663  -4967.1783] to CCS.\n",
+      "Value [-12623.0663  -4967.1783] is dominated. Discarding.\n",
+      "W_corner: [array([0.0608, 0.9392]), array([1., 0.]), array([0., 1.]), array([0.0194, 0.9806])] W_corner size: 4\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12476.235,  -4943.536], dtype=float32), array([-12608.276 ,  -4940.9272])] CCS size: 3\n",
+      "Next weight: [0.0194 0.9806]\n",
+      "Next weight vector: [0.0194 0.9806]\n",
+      "Adding value: [-12416.999   -4955.4883] to CCS.\n",
+      "Value [-12416.999   -4955.4883] is dominated. Discarding.\n",
+      "Adding value: [-12632.732  -4954.634] to CCS.\n",
+      "Value [-12632.732  -4954.634] is dominated. Discarding.\n",
+      "Adding value: [-12611.9946  -4960.7038] to CCS.\n",
+      "Value [-12611.9946  -4960.7038] is dominated. Discarding.\n",
+      "Adding value: [-12539.0687  -4943.3106] to CCS.\n",
+      "Value [-12539.0687  -4943.3106] is dominated. Discarding.\n",
+      "Adding value: [-12555.7166  -4939.8088] to CCS.\n",
+      "removed value [-12608.276   -4940.9272]\n",
+      "removed value [-12476.235  -4943.536]\n",
+      "Adding value: [-12577.4225  -4946.9028] to CCS.\n",
+      "Value [-12577.4225  -4946.9028] is dominated. Discarding.\n",
+      "Adding value: [-12594.4781  -4976.1742] to CCS.\n",
+      "Value [-12594.4781  -4976.1742] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.0528, 0.9472]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12555.7166,  -4939.8088])] CCS size: 2\n",
+      "Next weight: [0.0528 0.9472]\n",
+      "Next weight vector: [0.0528 0.9472]\n",
+      "Adding value: [-12662.096   -4962.5234] to CCS.\n",
+      "Value [-12662.096   -4962.5234] is dominated. Discarding.\n",
+      "Adding value: [-12570.1864  -4955.828 ] to CCS.\n",
+      "Value [-12570.1864  -4955.828 ] is dominated. Discarding.\n",
+      "Adding value: [-12548.4372  -4954.8824] to CCS.\n",
+      "Value [-12548.4372  -4954.8824] is dominated. Discarding.\n",
+      "Adding value: [-12519.085   -4939.1403] to CCS.\n",
+      "removed value [-12555.7166  -4939.8088]\n",
+      "Adding value: [-12544.0788  -4958.0318] to CCS.\n",
+      "Value [-12544.0788  -4958.0318] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.0725, 0.9275]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-12397.65 ,  -4948.626], dtype=float32), array([-12519.085 ,  -4939.1403])] CCS size: 2\n",
+      "Next weight: [0.0725 0.9275]\n",
+      "Next weight vector: [0.0725 0.9275]\n",
+      "Adding value: [-12357.178  -4943.497] to CCS.\n",
+      "removed value [-12397.65   -4948.626]\n",
+      "Adding value: [-12468.0522  -4945.6962] to CCS.\n",
+      "Value [-12468.0522  -4945.6962] is dominated. Discarding.\n",
+      "Adding value: [-12438.0943  -4944.2545] to CCS.\n",
+      "Value [-12438.0943  -4944.2545] is dominated. Discarding.\n",
+      "Adding value: [-12437.5904  -4953.2111] to CCS.\n",
+      "Value [-12437.5904  -4953.2111] is dominated. Discarding.\n",
+      "Adding value: [-12582.6521  -4944.4984] to CCS.\n",
+      "Value [-12582.6521  -4944.4984] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▁▆▂█▃▄▁▆▇▄</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-8739.96272</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_lessPolicyNoise_HiddenLayers500__None__1681840083</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/tgq6y5r0' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/tgq6y5r0</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230418_194806-tgq6y5r0\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=False, nO=2, penalize=True, time_limit=365)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_lessPolicyNoise_HiddenLayers500', net_arch=[500])\n",
+    "\n",
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Results are significantly worse than when using normalized actions. Also, following the tips [here](https://stable-baselines.readthedocs.io/en/master/guide/rl_tips.html), it is better to normalize the action space (albeit not for TD3...)"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Testing GPI-ls on other environemnts\n",
+    "\n",
+    "Verify that we are in fact using the correct method for a continuous state MORL problem by training on the MO-hopper environment"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\spaces\\box.py:129: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n",
+      "  gym.logger.warn(f\"Box bound precision lowered by casting to {self.dtype}\")\n",
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.15.0 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230424_130040-dgf8cm1m</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">mo-mountaincarcontinuous-v0__gpi-ls_cart__None__1682334036</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_cart\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-9.9996e+01 -3.8620e-02] to CCS.\n",
+      "Adding value: [-99.9957 -58.0822] to CCS.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9957, -58.0822], dtype=float32)] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-9.9996e+01 -5.1989e-02] to CCS.\n",
+      "removed value [-99.9957 -58.0822]\n",
+      "Adding value: [-99.9957 -62.562 ] to CCS.\n",
+      "removed value [-9.9996e+01 -5.1989e-02]\n",
+      "Adding value: [-9.9996e+01 -5.1786e-02] to CCS.\n",
+      "removed value [-99.9957 -62.562 ]\n",
+      "Adding value: [-99.9956 -63.2635] to CCS.\n",
+      "removed value [-9.9996e+01 -5.1786e-02]\n",
+      "W_corner: [array([1., 0.]), array([1.0000e+00, 1.5817e-06]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956, -63.2635])] CCS size: 2\n",
+      "Next weight: [1.0000e+00 1.5817e-06]\n",
+      "Next weight vector: [1.0000e+00 1.5817e-06]\n",
+      "Adding value: [-99.9957  -0.2137] to CCS.\n",
+      "Value [-99.9957  -0.2137] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -73.2671] to CCS.\n",
+      "removed value [-99.9956 -63.2635]\n",
+      "Adding value: [-99.9956 -71.7984] to CCS.\n",
+      "removed value [-99.9956 -73.2671]\n",
+      "Adding value: [-99.9956  -0.3793] to CCS.\n",
+      "removed value [-99.9956 -71.7984]\n",
+      "Adding value: [-99.9956 -72.5853] to CCS.\n",
+      "W_corner: [array([1., 0.]), array([9.9971e-01, 2.9343e-04]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956,  -0.3793]), array([-99.9956, -72.5853])] CCS size: 3\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-9.9996e+01 -3.4456e-02] to CCS.\n",
+      "removed value [-9.9996e+01 -3.8620e-02]\n",
+      "Adding value: [-9.9996e+01 -3.4333e-02] to CCS.\n",
+      "removed value [-9.9996e+01 -3.4456e-02]\n",
+      "removed value [-99.9956 -72.5853]\n",
+      "removed value [-99.9956  -0.3793]\n",
+      "Adding value: [-99.9956 -72.6202] to CCS.\n",
+      "Adding value: [-99.9956 -70.2426] to CCS.\n",
+      "removed value [-99.9956 -72.6202]\n",
+      "Adding value: [-99.9956 -72.4862] to CCS.\n",
+      "removed value [-99.9956 -70.2426]\n",
+      "Adding value: [-9.9996e+01 -7.4841e-02] to CCS.\n",
+      "removed value [-99.9956 -72.4862]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([-9.9996e+01, -3.4333e-02]), array([-9.9996e+01, -7.4841e-02])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-99.9956  -0.1212] to CCS.\n",
+      "removed value [-9.9996e+01 -7.4841e-02]\n",
+      "Adding value: [-9.9996e+01 -1.2951e-03] to CCS.\n",
+      "removed value [-99.9956  -0.1212]\n",
+      "removed value [-9.9996e+01 -3.4333e-02]\n",
+      "Adding value: [-99.9956 -55.7682] to CCS.\n",
+      "Adding value: [-9.9996e+01 -1.3869e-03] to CCS.\n",
+      "removed value [-99.9956 -55.7682]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([-9.9996e+01, -1.2951e-03]), array([-9.9996e+01, -1.3869e-03])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-9.9996e+01 -1.5441e-03] to CCS.\n",
+      "removed value [-9.9996e+01 -1.3869e-03]\n",
+      "Adding value: [-9.9996e+01 -3.4932e-02] to CCS.\n",
+      "removed value [-9.9996e+01 -1.5441e-03]\n",
+      "Adding value: [-99.9956 -51.6448] to CCS.\n",
+      "removed value [-9.9996e+01 -3.4932e-02]\n",
+      "Adding value: [-9.9996e+01 -7.9808e-04] to CCS.\n",
+      "removed value [-99.9956 -51.6448]\n",
+      "removed value [-9.9996e+01 -1.2951e-03]\n",
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([-9.9996e+01, -7.9808e-04])] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-9.9996e+01 -6.7070e-03] to CCS.\n",
+      "Adding value: [-99.9808 -47.8051] to CCS.\n",
+      "removed value [-9.9996e+01 -6.7070e-03]\n",
+      "Adding value: [-9.9996e+01 -8.7628e-03] to CCS.\n",
+      "Value [-9.9996e+01 -8.7628e-03] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([9.9969e-01, 3.0950e-04]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.9808, -47.8051])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-9.9996e+01 -1.9521e-02] to CCS.\n",
+      "Value [-9.9996e+01 -1.9521e-02] is dominated. Discarding.\n",
+      "Adding value: [-99.6818 -68.2385] to CCS.\n",
+      "removed value [-99.9808 -47.8051]\n",
+      "Adding value: [-99.9753 -65.719 ] to CCS.\n",
+      "Value [-99.9753 -65.719 ] is dominated. Discarding.\n",
+      "Adding value: [-99.9956  -0.1421] to CCS.\n",
+      "Value [-99.9956  -0.1421] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -64.2368] to CCS.\n",
+      "Value [-99.9956 -64.2368] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
+      "Next weight: [0.9954 0.0046]\n",
+      "Next weight vector: [0.9954 0.0046]\n",
+      "Adding value: [-9.9996e+01 -4.8593e-02] to CCS.\n",
+      "Value [-9.9996e+01 -4.8593e-02] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -64.5916] to CCS.\n",
+      "Value [-99.9956 -64.5916] is dominated. Discarding.\n",
+      "Adding value: [-99.9956  -0.1756] to CCS.\n",
+      "Value [-99.9956  -0.1756] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -66.1056] to CCS.\n",
+      "Value [-99.9956 -66.1056] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -65.9382] to CCS.\n",
+      "Value [-99.9956 -65.9382] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
+      "Next weight: [0.9954 0.0046]\n",
+      "Next weight vector: [0.9954 0.0046]\n",
+      "Adding value: [-99.9956  -0.1548] to CCS.\n",
+      "Value [-99.9956  -0.1548] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -64.2804] to CCS.\n",
+      "Value [-99.9956 -64.2804] is dominated. Discarding.\n",
+      "Adding value: [-99.9956  -0.1292] to CCS.\n",
+      "Value [-99.9956  -0.1292] is dominated. Discarding.\n",
+      "Adding value: [-99.9751 -64.9296] to CCS.\n",
+      "Value [-99.9751 -64.9296] is dominated. Discarding.\n",
+      "Adding value: [-99.9956 -65.9157] to CCS.\n",
+      "Value [-99.9956 -65.9157] is dominated. Discarding.\n"
+     ]
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('mo-mountaincarcontinuous-v0')\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_cart')\n",
+    "\n",
+    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32))"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Test on mujoco hopper\n",
+    "\n",
+    "The results of the training on mountaincart were not great at all, in fact no learning occured...\n",
+    "\n",
+    "In the [gpi paper](https://arxiv.org/abs/2301.07784), this environment was used to test the algorithm. "
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
    "source": [
-    "from morl_baselines.common.evaluation import eval_mo\n",
+    "env = mo_gym.make('mo-hopper-v4', cost_objective=False)\n",
     "\n",
-    "env = mo_gym.make('water-reservoir-v0')\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi_hopper')\n",
     "\n",
-    "for a in PGAgent.archive.individuals:\n",
-    "        scalarized, discounted_scalarized, reward, discounted_reward = eval_mo(\n",
-    "            agent=a, env=env, w=np.array([0.7, 0.3]), render=True\n",
-    "        )\n",
-    "        print(f\"Agent #{a.id}\")\n",
-    "        print(f\"Scalarized: {scalarized}\")\n",
-    "        print(f\"Discounted scalarized: {discounted_scalarized}\")\n",
-    "        print(f\"Vectorial: {reward}\")\n",
-    "        print(f\"Discounted vectorial: {discounted_reward}\")"
+    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32))"
    ]
   }
  ],
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=1.tar b/Gpi/weights/GPI-PD gpi-ls iter=1.tar
index 46b1afb..e35b936 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=1.tar and b/Gpi/weights/GPI-PD gpi-ls iter=1.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=10.tar b/Gpi/weights/GPI-PD gpi-ls iter=10.tar
index ec935f3..804ef44 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=10.tar and b/Gpi/weights/GPI-PD gpi-ls iter=10.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=2.tar b/Gpi/weights/GPI-PD gpi-ls iter=2.tar
index 41cea62..5028b9d 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=2.tar and b/Gpi/weights/GPI-PD gpi-ls iter=2.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=3.tar b/Gpi/weights/GPI-PD gpi-ls iter=3.tar
index 431ef06..68a35db 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=3.tar and b/Gpi/weights/GPI-PD gpi-ls iter=3.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=4.tar b/Gpi/weights/GPI-PD gpi-ls iter=4.tar
index ac2dab8..b1c924d 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=4.tar and b/Gpi/weights/GPI-PD gpi-ls iter=4.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=5.tar b/Gpi/weights/GPI-PD gpi-ls iter=5.tar
index d687fc1..b8eba55 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=5.tar and b/Gpi/weights/GPI-PD gpi-ls iter=5.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=6.tar b/Gpi/weights/GPI-PD gpi-ls iter=6.tar
index 708b11d..a2f85ec 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=6.tar and b/Gpi/weights/GPI-PD gpi-ls iter=6.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=7.tar b/Gpi/weights/GPI-PD gpi-ls iter=7.tar
index 06149ef..2373660 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=7.tar and b/Gpi/weights/GPI-PD gpi-ls iter=7.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=8.tar b/Gpi/weights/GPI-PD gpi-ls iter=8.tar
index af5dc83..6037fb4 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=8.tar and b/Gpi/weights/GPI-PD gpi-ls iter=8.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=9.tar b/Gpi/weights/GPI-PD gpi-ls iter=9.tar
index 0418094..cb3a18e 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=9.tar and b/Gpi/weights/GPI-PD gpi-ls iter=9.tar differ
