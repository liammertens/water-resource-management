diff --git a/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv b/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv
deleted file mode 100644
index b977d98..0000000
--- a/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv
+++ /dev/null
@@ -1,101 +0,0 @@
-"objective_1","objective_2"
-"-91.53183007217012","-1022.8256506800651"
-"-78.14203669836861","-1079.0625104665291"
-"-74.99723661369644","-1049.0283968668896"
-"-85.00558884590865","-1072.5191177143715"
-"-66.2141448321864","-1057.5463390932769"
-"-81.62407328251501","-1002.5212741631083"
-"-79.44533374300227","-1064.5143912418134"
-"-79.83635042691603","-1039.4494809277342"
-"-76.28534322760534","-1065.459482320503"
-"-78.88567748800851","-1051.7242583856219"
-"-71.82255094414577","-1103.647342278203"
-"-79.67586851716041","-1046.2717485904345"
-"-74.87652528388426","-1051.3167366615612"
-"-73.19352013177703","-1032.8102254761384"
-"-77.57616099696607","-1020.4398037040839"
-"-86.46370708914473","-1044.701641778997"
-"-101.88883917918429","-1016.9287435288076"
-"-90.10309673263255","-1042.0823319560848"
-"-72.34625697184819","-1034.1459662067239"
-"-83.88403454828077","-1040.6301453631372"
-"-83.05747746049892","-1058.7115071860142"
-"-78.38347562580603","-1035.9806638120208"
-"-87.4690231606597","-1032.7514905171934"
-"-75.8715149776428","-1065.6731638046476"
-"-85.29073780232575","-1001.0196151528274"
-"-90.33892673660303","-1040.491965832282"
-"-85.09421532871201","-1044.2861699821892"
-"-92.58384429900907","-1033.0266553443391"
-"-77.05096556837671","-1038.2645520546473"
-"-96.75805392521434","-1032.6535591783002"
-"-84.15438853034284","-1047.301008518017"
-"-78.17892651581205","-1087.3532411946683"
-"-79.92654804161285","-1083.2035126082133"
-"-74.45834255921655","-1052.9716980567669"
-"-90.61150308246724","-1051.4039334182628"
-"-86.86262932035606","-1019.8799248492811"
-"-93.51119706424069","-1007.5876250263536"
-"-76.31560729660559","-1118.6255158333456"
-"-88.33768567945808","-1063.965476927394"
-"-85.4251508815214","-1038.569608161226"
-"-83.2859241082333","-1061.5740060664714"
-"-82.14688430611568","-1095.0912599908654"
-"-71.46011308846064","-1076.6343653987074"
-"-86.42477027187124","-1038.8063949177188"
-"-82.55838660364971","-1045.7799231674405"
-"-86.89799576252699","-1068.49564575057"
-"-75.42380763373804","-1026.7328610267955"
-"-88.582664007321","-1040.5024155435617"
-"-89.94019629471003","-1024.2490765049472"
-"-76.02846596031449","-1020.3580706219188"
-"-75.32445026878267","-1062.0378788017667"
-"-73.74743387565249","-1046.516115244478"
-"-83.63155948025087","-1027.3204001104073"
-"-86.05296205226333","-1075.3762032703496"
-"-71.2909983347694","-1053.7322991570459"
-"-92.83743247255661","-1006.2255636485527"
-"-81.29852420622483","-1055.6236468834336"
-"-87.37987329747993","-1043.2028257664758"
-"-82.21699301255867","-1040.1190810038709"
-"-71.00971493606922","-1087.348992808163"
-"-98.45940790503519","-1028.8287179885433"
-"-91.56131216515787","-1001.589259513421"
-"-72.55577458748594","-1079.489494658867"
-"-76.06018349155784","-1067.3429756452213"
-"-75.44200412477366","-1044.090343687078"
-"-76.48364048982039","-1063.2016782157123"
-"-73.97838431347627","-1033.0927119034343"
-"-82.37117097729352","-1085.2390213828069"
-"-69.2863412049599","-1089.0756568949205"
-"-85.22632192494348","-1056.8919947802788"
-"-77.21806081857066","-1103.683186232904"
-"-84.36187441371149","-985.7269350973714"
-"-73.89989965860732","-1101.4776355137467"
-"-94.3241130166105","-994.7338124457281"
-"-71.79193605883047","-1064.6261081409698"
-"-68.91599002913571","-1093.0282023234292"
-"-79.15210377918557","-1013.387120728381"
-"-75.38006720975973","-1037.6150288307108"
-"-85.7210139027331","-1063.6825081494753"
-"-97.22303072623909","-1035.9331666750052"
-"-76.00172006906942","-1060.7065991393872"
-"-80.0657581034371","-1047.5291201985813"
-"-79.54214356876909","-1050.4107896117027"
-"-83.83055768767372","-1074.6590507650283"
-"-82.74088046588004","-1025.9811924742535"
-"-83.70773554844781","-1061.8992664878722"
-"-91.67636479586363","-1045.2713631242514"
-"-75.78754267459735","-1062.3580996553646"
-"-87.71408887887374","-1058.676021124434"
-"-85.10292972642928","-1062.5798477028613"
-"-88.39362296483014","-1052.7670409579296"
-"-80.83529201577184","-1101.2550276985858"
-"-91.24902236172929","-1009.4609033303335"
-"-74.24542560492701","-1032.9046872914303"
-"-94.64312865007669","-1009.7128772354685"
-"-80.75568267405033","-1011.159529741644"
-"-72.93039533859118","-1076.3741638501174"
-"-66.7733762821299","-1075.3790101447375"
-"-94.6002845563111","-1016.2957660613581"
-"-69.3648760257056","-1056.3059688504552"
\ No newline at end of file
diff --git a/Gpi/main.ipynb b/Gpi/main.ipynb
index 6b2fec5..225dd17 100644
--- a/Gpi/main.ipynb
+++ b/Gpi/main.ipynb
@@ -13,7 +13,8 @@
     "Algorithms:\n",
     "- GPI-ls + TD3\n",
     "- PCN\n",
-    "- ?"
+    "\n",
+    "The returns used for the plotted pareto fronts are the discounted returns averaged over 5 episodes (default), unless specified otherwise."
    ]
   },
   {
@@ -23,10 +24,9 @@
    "source": [
     "# TODO...\n",
     "\n",
-    "- Tune hyperparameters/environment parameters to get improved results using GPI-ls\n",
+    "- Tune hyperparameters/environment to get improved results using GPI-ls\n",
     "- Decide between normalized actions or true actions\n",
-    "- Get a reference for comparing with GPI-ls results: PCN, original paper (MOFQI), [original experiment](https://github.com/sparisi/mips/tree/loopless/MDPs/Dam)\n",
-    "- Consider using [MOFQI](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) instead of TD3 in combination with gpi-ls.\n"
+    "- Get a reference for comparing with GPI-ls results: PCN, [original experiment](https://github.com/sparisi/mips/tree/loopless/MDPs/Dam)"
    ]
   },
   {
@@ -814,371 +814,11 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "The results are no better than in previous experiments, but we can clearly see that there is a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases.\n",
-    "\n",
-    "We can conclude that using only a single hidden layer suffices for now. Next, we can try to alter [batch size](https://openreview.net/pdf?id=B1Yy1BxCZ) or [buffer size](https://ai.stackexchange.com/questions/11640/how-large-should-the-replay-buffer-be).\n",
-    "\n",
-    "## Attempt #3\n",
-    "First, try to increase the buffer size so that the network does not overfit on recent experiences.\n",
-    "\n",
-    "- net_arch = [500]\n",
-    "- buffer_size = 3650\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
-      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
-       " $ pip install wandb --upgrade"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Tracking run with wandb version 0.14.0"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230418_122106-zf8cirni</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CCS: [] CCS size: 0\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -91.4887 -1043.3635] to CCS.\n",
-      "Adding value: [  -82.9375 -1083.8959] to CCS.\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "W_corner: [array([1., 0.]), array([0.8258, 0.1742]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -91.4887, -1043.3635], dtype=float32), array([  -82.9375, -1083.8959], dtype=float32)] CCS size: 2\n",
-      "Next weight: [0.8258 0.1742]\n",
-      "Next weight vector: [0.8258 0.1742]\n",
-      "Adding value: [  -83.1618 -1087.2312] to CCS.\n",
-      "Value [  -83.1618 -1087.2312] is dominated. Discarding.\n",
-      "Adding value: [  -85.7546 -1087.4425] to CCS.\n",
-      "Value [  -85.7546 -1087.4425] is dominated. Discarding.\n",
-      "Adding value: [  -84.1725 -1057.924 ] to CCS.\n",
-      "Value [  -84.1725 -1057.924 ] is dominated. Discarding.\n",
-      "Adding value: [  -78.6874 -1023.8228] to CCS.\n",
-      "removed value [  -82.9375 -1083.8959]\n",
-      "removed value [  -91.4887 -1043.3635]\n",
-      "Adding value: [  -72.5249 -1098.1948] to CCS.\n",
-      "W_corner: [array([1., 0.]), array([0.9235, 0.0765]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -78.6874, -1023.8228]), array([  -72.5249, -1098.1948])] CCS size: 2\n",
-      "Next weight: [0.9235 0.0765]\n",
-      "Next weight vector: [0.9235 0.0765]\n",
-      "Adding value: [  -70.7668 -1082.4304] to CCS.\n",
-      "removed value [  -72.5249 -1098.1948]\n",
-      "Adding value: [  -87.5697 -1072.8665] to CCS.\n",
-      "Value [  -87.5697 -1072.8665] is dominated. Discarding.\n",
-      "Adding value: [  -95.9061 -1021.7206] to CCS.\n",
-      "Adding value: [  -98.2004 -1047.9913] to CCS.\n",
-      "Value [  -98.2004 -1047.9913] is dominated. Discarding.\n",
-      "Adding value: [  -72.5381 -1061.1942] to CCS.\n",
-      "Value [  -72.5381 -1061.1942] is dominated. Discarding.\n",
-      "W_corner: [array([0.8809, 0.1191]), array([1., 0.]), array([0., 1.]), array([0.1088, 0.8912])] W_corner size: 4\n",
-      "CCS: [array([  -78.6874, -1023.8228]), array([  -70.7668, -1082.4304]), array([  -95.9061, -1021.7206])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [  -61.2935 -1078.9337] to CCS.\n",
-      "removed value [  -70.7668 -1082.4304]\n",
-      "removed value [  -78.6874 -1023.8228]\n",
-      "Adding value: [  -75.069  -1069.3299] to CCS.\n",
-      "Value [  -75.069  -1069.3299] is dominated. Discarding.\n",
-      "Adding value: [  -71.2487 -1049.4456] to CCS.\n",
-      "Value [  -71.2487 -1049.4456] is dominated. Discarding.\n",
-      "Adding value: [  -76.3961 -1095.309 ] to CCS.\n",
-      "Value [  -76.3961 -1095.309 ] is dominated. Discarding.\n",
-      "Adding value: [  -71.3193 -1059.7824] to CCS.\n",
-      "Value [  -71.3193 -1059.7824] is dominated. Discarding.\n",
-      "Adding value: [  -74.6974 -1062.8073] to CCS.\n",
-      "Value [  -74.6974 -1062.8073] is dominated. Discarding.\n",
-      "Adding value: [  -95.0864 -1041.5788] to CCS.\n",
-      "Value [  -95.0864 -1041.5788] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.6231, 0.3769]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -95.9061, -1021.7206]), array([  -61.2935, -1078.9337])] CCS size: 2\n",
-      "Next weight: [0.6231 0.3769]\n",
-      "Next weight vector: [0.6231 0.3769]\n",
-      "Adding value: [  -80.2084 -1072.983 ] to CCS.\n",
-      "Value [  -80.2084 -1072.983 ] is dominated. Discarding.\n",
-      "Adding value: [  -90.8638 -1051.6204] to CCS.\n",
-      "Value [  -90.8638 -1051.6204] is dominated. Discarding.\n",
-      "Adding value: [  -90.5433 -1018.7755] to CCS.\n",
-      "removed value [  -95.9061 -1021.7206]\n",
-      "Adding value: [  -72.4396 -1026.0345] to CCS.\n",
-      "Adding value: [  -79.4654 -1027.9323] to CCS.\n",
-      "Value [  -79.4654 -1027.9323] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.2862, 0.7138])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -90.5433, -1018.7755]), array([  -72.4396, -1026.0345])] CCS size: 3\n",
-      "Next weight: [0.826 0.174]\n",
-      "Next weight vector: [0.826 0.174]\n",
-      "Adding value: [  -77.2351 -1051.186 ] to CCS.\n",
-      "Value [  -77.2351 -1051.186 ] is dominated. Discarding.\n",
-      "Adding value: [  -84.6875 -1052.685 ] to CCS.\n",
-      "Value [  -84.6875 -1052.685 ] is dominated. Discarding.\n",
-      "Adding value: [  -73.0153 -1060.5025] to CCS.\n",
-      "Value [  -73.0153 -1060.5025] is dominated. Discarding.\n",
-      "Adding value: [  -82.2024 -1055.3418] to CCS.\n",
-      "Value [  -82.2024 -1055.3418] is dominated. Discarding.\n",
-      "Adding value: [  -79.0316 -1071.6413] to CCS.\n",
-      "Value [  -79.0316 -1071.6413] is dominated. Discarding.\n",
-      "Adding value: [  -84.0287 -1045.6269] to CCS.\n",
-      "Value [  -84.0287 -1045.6269] is dominated. Discarding.\n",
-      "Adding value: [  -88.8499 -1012.6056] to CCS.\n",
-      "removed value [  -90.5433 -1018.7755]\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [  -78.8052 -1060.4226] to CCS.\n",
-      "Value [  -78.8052 -1060.4226] is dominated. Discarding.\n",
-      "Adding value: [  -73.1717 -1063.9648] to CCS.\n",
-      "Value [  -73.1717 -1063.9648] is dominated. Discarding.\n",
-      "Adding value: [  -84.5917 -1061.2625] to CCS.\n",
-      "Value [  -84.5917 -1061.2625] is dominated. Discarding.\n",
-      "Adding value: [  -76.4639 -1066.2845] to CCS.\n",
-      "Value [  -76.4639 -1066.2845] is dominated. Discarding.\n",
-      "Adding value: [ -103.2944 -1043.9017] to CCS.\n",
-      "Value [ -103.2944 -1043.9017] is dominated. Discarding.\n",
-      "Adding value: [  -66.4684 -1074.1776] to CCS.\n",
-      "Value [  -66.4684 -1074.1776] is dominated. Discarding.\n",
-      "Adding value: [  -85.4805 -1073.3403] to CCS.\n",
-      "Value [  -85.4805 -1073.3403] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [0.45 0.55]\n",
-      "Next weight vector: [0.45 0.55]\n",
-      "Adding value: [  -81.1672 -1044.4494] to CCS.\n",
-      "Value [  -81.1672 -1044.4494] is dominated. Discarding.\n",
-      "Adding value: [  -81.9442 -1070.6108] to CCS.\n",
-      "Value [  -81.9442 -1070.6108] is dominated. Discarding.\n",
-      "Adding value: [  -96.5051 -1045.6222] to CCS.\n",
-      "Value [  -96.5051 -1045.6222] is dominated. Discarding.\n",
-      "Adding value: [  -83.2376 -1088.5272] to CCS.\n",
-      "Value [  -83.2376 -1088.5272] is dominated. Discarding.\n",
-      "Adding value: [  -80.0558 -1077.7388] to CCS.\n",
-      "Value [  -80.0558 -1077.7388] is dominated. Discarding.\n",
-      "Adding value: [  -70.7796 -1076.772 ] to CCS.\n",
-      "Value [  -70.7796 -1076.772 ] is dominated. Discarding.\n",
-      "Adding value: [  -75.5809 -1040.8647] to CCS.\n",
-      "Value [  -75.5809 -1040.8647] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -74.6747 -1038.1342] to CCS.\n",
-      "Value [  -74.6747 -1038.1342] is dominated. Discarding.\n",
-      "Adding value: [  -87.3841 -1023.9272] to CCS.\n",
-      "Value [  -87.3841 -1023.9272] is dominated. Discarding.\n",
-      "Adding value: [  -82.8854 -1079.9265] to CCS.\n",
-      "Value [  -82.8854 -1079.9265] is dominated. Discarding.\n",
-      "Adding value: [  -78.1681 -1077.8876] to CCS.\n",
-      "Value [  -78.1681 -1077.8876] is dominated. Discarding.\n",
-      "Adding value: [  -95.8899 -1021.4416] to CCS.\n",
-      "Value [  -95.8899 -1021.4416] is dominated. Discarding.\n",
-      "Adding value: [  -88.3077 -1037.5199] to CCS.\n",
-      "Value [  -88.3077 -1037.5199] is dominated. Discarding.\n",
-      "Adding value: [  -82.4825 -1019.1509] to CCS.\n",
-      "Value [  -82.4825 -1019.1509] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -80.0987 -1004.3626] to CCS.\n",
-      "removed value [  -88.8499 -1012.6056]\n",
-      "Adding value: [  -64.9331 -1075.9121] to CCS.\n",
-      "Value [  -64.9331 -1075.9121] is dominated. Discarding.\n",
-      "Adding value: [  -78.6876 -1025.3916] to CCS.\n",
-      "Value [  -78.6876 -1025.3916] is dominated. Discarding.\n",
-      "Adding value: [  -88.8268 -1030.7416] to CCS.\n",
-      "Value [  -88.8268 -1030.7416] is dominated. Discarding.\n",
-      "Adding value: [  -71.1392 -1029.3756] to CCS.\n",
-      "removed value [  -72.4396 -1026.0345]\n",
-      "Adding value: [  -74.8615 -1118.2019] to CCS.\n",
-      "Value [  -74.8615 -1118.2019] is dominated. Discarding.\n",
-      "Adding value: [  -88.6611 -1072.6236] to CCS.\n",
-      "Value [  -88.6611 -1072.6236] is dominated. Discarding.\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "<style>\n",
-       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
-       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
-       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
-       "    </style>\n",
-       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▅▇▆▁▆█▄▆▆▇</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-567.61581</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Find logs at: <code>.\\wandb\\run-20230418_122106-zf8cirni\\logs</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
+    "The results are no better than in previous experiments, but there might be a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases. Another explanation might be that there is insufficient exploration due to lower policy noise and learning_starts = 100 timesteps. Investigate...\n",
     "\n",
-    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650', policy_noise=0.002, noise_clip=0.005, net_arch=[500], buffer_size=3650)\n",
+    "Next, we could try to alter [batch size](https://openreview.net/pdf?id=B1Yy1BxCZ) or [buffer size](https://ai.stackexchange.com/questions/11640/how-large-should-the-replay-buffer-be). And take a look at the randomness of the environment.\n",
     "\n",
-    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plot_pf('2obj_norm_lessPNoise_Hlayer200buffer3650.csv')"
-   ]
-  },
-  {
-   "attachments": {},
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "The resulting CCS is very similar to the previous."
+    "The hidden layer configuration does not impact learning significantly, so the default setup suffices."
    ]
   },
   {
@@ -1188,11 +828,13 @@
    "source": [
     "## Comparison with original paper\n",
     "\n",
-    "In [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) an experiment on the same simulated dam environment was conducted. Their results are a lot better, but the environment was only simulated for 100 timesteps/episode instead of the 365 used here.\n",
+    "In [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) an experiment on the same simulated dam environment was conducted. Their results are a lot better, but the environment was only simulated for 100 timesteps/episode instead of the 365 used here. \n",
+    "\n",
+    "Also note that the returns used in the paper correspond to the average immediate rewards under each policy (instead of the discounted returns used here).\n",
     "\n",
     "We now conduct an experiment to test the randomness of the environment and see if this influences the mean utility. In order to test this, evaluate the policy for significantly more episodes (50) \n",
     "\n",
-    "In order to reduce training time, set time_limit = 100"
+    "In order to reduce training time, set time_limit = 100 (default, as in paper)"
    ]
   },
   {
@@ -1578,7 +1220,7 @@
    "source": [
     "## Try using non-normalized actions\n",
     "\n",
-    "manually place upper bound on the action space:\n",
+    "Manually place upper bound on the action space:\n",
     "- Upper bound = 250.0\n",
     "\n",
     "Also increase learning_starts to explore the environment a little more initially and boost learning."
@@ -2194,7 +1836,7 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "Results are slightly worse than when using normalized actions. When compared to the experiments with normalised actions, it is clear that the returns of the water demand objective are higher than before.\n",
+    "Results are slightly worse than when using normalized actions. BUT, when compared to the experiments with normalised actions, it is noticable that the returns of the water demand objective (y-axis) are higher than before.\n",
     "\n",
     "## TODO:\n",
     "\n",
@@ -2203,7 +1845,15 @@
     "- noise_clip value\n",
     "- decide on noise decay or not\n",
     "\n",
-    "Increase learning_starts even more because the initial exploration seems valuable."
+    "Increase learning_starts even more because the initial exploration seems valuable when usin non-normalised actions\n",
+    "\n",
+    "Decided on upper bound for non-normalised actions\n",
+    "\n",
+    "Make some changes to the environment:\n",
+    "- Reduce randomness to test whether the algorithm has implementation issues or the environment is too random\n",
+    "\n",
+    "Change algorithm logging for fair comparison with [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective):\n",
+    "- Log the undiscounted returns instead of discounted"
    ]
   },
   {
@@ -2211,22 +1861,20 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## Testing GPI-ls on other environemnts\n",
+    "## Increase initial exploration (normalised actions)\n",
     "\n",
-    "Verify that we are in fact using the correct method for a continuous state MORL problem by training on the MO-hopper environment"
+    "Run the same experiment again but now using normalised actions to see the impact of initial exploration and see if using norm. actions is correlated to lower returns in the 2nd objective."
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\spaces\\box.py:129: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n",
-      "  gym.logger.warn(f\"Box bound precision lowered by casting to {self.dtype}\")\n",
       "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
       "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
      ]
@@ -2234,7 +1882,7 @@
     {
      "data": {
       "text/html": [
-       "wandb version 0.15.0 is available!  To upgrade, please run:\n",
+       "wandb version 0.15.1 is available!  To upgrade, please run:\n",
        " $ pip install wandb --upgrade"
       ],
       "text/plain": [
@@ -2259,7 +1907,7 @@
     {
      "data": {
       "text/html": [
-       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230424_130040-dgf8cm1m</code>"
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230504_113215-ar8x37f6</code>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -2271,7 +1919,7 @@
     {
      "data": {
       "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">mo-mountaincarcontinuous-v0__gpi-ls_cart__None__1682334036</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/ar8x37f6' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_norm__None__1683192732</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -2295,7 +1943,7 @@
     {
      "data": {
       "text/html": [
-       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m</a>"
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/ar8x37f6' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/ar8x37f6</a>"
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
@@ -2308,7 +1956,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_cart\n"
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_norm\n"
      ]
     },
     {
@@ -2318,8 +1966,8 @@
       "CCS: [] CCS size: 0\n",
       "Next weight: [1. 0.]\n",
       "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -3.8620e-02] to CCS.\n",
-      "Adding value: [-99.9957 -58.0822] to CCS.\n"
+      "Adding value: [ -58.7943 -680.3734] to CCS.\n",
+      "Adding value: [ -60.9007 -660.2865] to CCS.\n"
      ]
     },
     {
@@ -2333,133 +1981,1074 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9957, -58.0822], dtype=float32)] CCS size: 2\n",
+      "W_corner: [array([1., 0.]), array([0.9051, 0.0949]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -58.7943, -680.3734], dtype=float32), array([ -60.9007, -660.2865], dtype=float32)] CCS size: 2\n",
       "Next weight: [1. 0.]\n",
       "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -5.1989e-02] to CCS.\n",
-      "removed value [-99.9957 -58.0822]\n",
-      "Adding value: [-99.9957 -62.562 ] to CCS.\n",
-      "removed value [-9.9996e+01 -5.1989e-02]\n",
-      "Adding value: [-9.9996e+01 -5.1786e-02] to CCS.\n",
-      "removed value [-99.9957 -62.562 ]\n",
-      "Adding value: [-99.9956 -63.2635] to CCS.\n",
-      "removed value [-9.9996e+01 -5.1786e-02]\n",
-      "W_corner: [array([1., 0.]), array([1.0000e+00, 1.5817e-06]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956, -63.2635])] CCS size: 2\n",
-      "Next weight: [1.0000e+00 1.5817e-06]\n",
-      "Next weight vector: [1.0000e+00 1.5817e-06]\n",
-      "Adding value: [-99.9957  -0.2137] to CCS.\n",
-      "Value [-99.9957  -0.2137] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -73.2671] to CCS.\n",
-      "removed value [-99.9956 -63.2635]\n",
-      "Adding value: [-99.9956 -71.7984] to CCS.\n",
-      "removed value [-99.9956 -73.2671]\n",
-      "Adding value: [-99.9956  -0.3793] to CCS.\n",
-      "removed value [-99.9956 -71.7984]\n",
-      "Adding value: [-99.9956 -72.5853] to CCS.\n",
-      "W_corner: [array([1., 0.]), array([9.9971e-01, 2.9343e-04]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956,  -0.3793]), array([-99.9956, -72.5853])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -3.4456e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -3.8620e-02]\n",
-      "Adding value: [-9.9996e+01 -3.4333e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -3.4456e-02]\n",
-      "removed value [-99.9956 -72.5853]\n",
-      "removed value [-99.9956  -0.3793]\n",
-      "Adding value: [-99.9956 -72.6202] to CCS.\n",
-      "Adding value: [-99.9956 -70.2426] to CCS.\n",
-      "removed value [-99.9956 -72.6202]\n",
-      "Adding value: [-99.9956 -72.4862] to CCS.\n",
-      "removed value [-99.9956 -70.2426]\n",
-      "Adding value: [-9.9996e+01 -7.4841e-02] to CCS.\n",
-      "removed value [-99.9956 -72.4862]\n",
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -3.4333e-02]), array([-9.9996e+01, -7.4841e-02])] CCS size: 2\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-99.9956  -0.1212] to CCS.\n",
-      "removed value [-9.9996e+01 -7.4841e-02]\n",
-      "Adding value: [-9.9996e+01 -1.2951e-03] to CCS.\n",
-      "removed value [-99.9956  -0.1212]\n",
-      "removed value [-9.9996e+01 -3.4333e-02]\n",
-      "Adding value: [-99.9956 -55.7682] to CCS.\n",
-      "Adding value: [-9.9996e+01 -1.3869e-03] to CCS.\n",
-      "removed value [-99.9956 -55.7682]\n",
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -1.2951e-03]), array([-9.9996e+01, -1.3869e-03])] CCS size: 2\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -1.5441e-03] to CCS.\n",
-      "removed value [-9.9996e+01 -1.3869e-03]\n",
-      "Adding value: [-9.9996e+01 -3.4932e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -1.5441e-03]\n",
-      "Adding value: [-99.9956 -51.6448] to CCS.\n",
-      "removed value [-9.9996e+01 -3.4932e-02]\n",
-      "Adding value: [-9.9996e+01 -7.9808e-04] to CCS.\n",
-      "removed value [-99.9956 -51.6448]\n",
-      "removed value [-9.9996e+01 -1.2951e-03]\n",
-      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04])] CCS size: 1\n",
+      "Adding value: [ -53.6537 -687.3742] to CCS.\n",
+      "removed value [ -58.7943 -680.3734]\n",
+      "Adding value: [ -56.4909 -677.2963] to CCS.\n",
+      "Value [ -56.4909 -677.2963] is dominated. Discarding.\n",
+      "Adding value: [ -55.4919 -690.63  ] to CCS.\n",
+      "Value [ -55.4919 -690.63  ] is dominated. Discarding.\n",
+      "Adding value: [ -57.4203 -691.5366] to CCS.\n",
+      "Value [ -57.4203 -691.5366] is dominated. Discarding.\n",
+      "Adding value: [ -50.9979 -675.82  ] to CCS.\n",
+      "removed value [ -53.6537 -687.3742]\n",
+      "W_corner: [array([1., 0.]), array([0.6107, 0.3893]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -50.9979, -675.82  ])] CCS size: 2\n",
+      "Next weight: [0.6107 0.3893]\n",
+      "Next weight vector: [0.6107 0.3893]\n",
+      "Adding value: [ -48.5231 -682.8264] to CCS.\n",
+      "removed value [ -50.9979 -675.82  ]\n",
+      "Adding value: [ -54.4137 -684.4165] to CCS.\n",
+      "Value [ -54.4137 -684.4165] is dominated. Discarding.\n",
+      "Adding value: [ -48.2842 -710.9747] to CCS.\n",
+      "Adding value: [ -55.8211 -673.0477] to CCS.\n",
+      "Value [ -55.8211 -673.0477] is dominated. Discarding.\n",
+      "Adding value: [ -49.8447 -675.0713] to CCS.\n",
+      "W_corner: [array([0.8544, 0.1456]), array([1., 0.]), array([0.9916, 0.0084]), array([0., 1.]), array([0.5721, 0.4279])] W_corner size: 5\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.5231, -682.8264], dtype=float32), array([ -48.2842, -710.9747]), array([ -49.8447, -675.0713])] CCS size: 4\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -53.5396 -691.4264] to CCS.\n",
+      "Value [ -53.5396 -691.4264] is dominated. Discarding.\n",
+      "Adding value: [ -54.1257 -694.1016] to CCS.\n",
+      "Value [ -54.1257 -694.1016] is dominated. Discarding.\n",
+      "Adding value: [ -50.7605 -691.6967] to CCS.\n",
+      "Value [ -50.7605 -691.6967] is dominated. Discarding.\n",
+      "Adding value: [ -53.2826 -692.4907] to CCS.\n",
+      "Value [ -53.2826 -692.4907] is dominated. Discarding.\n",
+      "Adding value: [ -60.7152 -674.6658] to CCS.\n",
+      "Value [ -60.7152 -674.6658] is dominated. Discarding.\n",
+      "Adding value: [ -50.6938 -672.7194] to CCS.\n",
+      "Adding value: [ -50.5584 -687.5221] to CCS.\n",
+      "Value [ -50.5584 -687.5221] is dominated. Discarding.\n",
+      "Adding value: [ -52.3575 -690.6905] to CCS.\n",
+      "Value [ -52.3575 -690.6905] is dominated. Discarding.\n",
+      "Adding value: [ -50.3772 -689.9162] to CCS.\n",
+      "Value [ -50.3772 -689.9162] is dominated. Discarding.\n",
+      "W_corner: [array([0.7347, 0.2653]), array([0.9916, 0.0084]), array([1., 0.]), array([0.8544, 0.1456]), array([0., 1.]), array([0.5492, 0.4508])] W_corner size: 6\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.5231, -682.8264], dtype=float32), array([ -48.2842, -710.9747]), array([ -49.8447, -675.0713]), array([ -50.6938, -672.7194])] CCS size: 5\n",
+      "Next weight: [0.7347 0.2653]\n",
+      "Next weight vector: [0.7347 0.2653]\n",
+      "Adding value: [ -54.8654 -675.7639] to CCS.\n",
+      "Value [ -54.8654 -675.7639] is dominated. Discarding.\n",
+      "Adding value: [ -56.8281 -667.6348] to CCS.\n",
+      "Value [ -56.8281 -667.6348] is dominated. Discarding.\n",
+      "Adding value: [ -54.8458 -683.0266] to CCS.\n",
+      "Value [ -54.8458 -683.0266] is dominated. Discarding.\n",
+      "Adding value: [ -58.1959 -675.7995] to CCS.\n",
+      "Value [ -58.1959 -675.7995] is dominated. Discarding.\n",
+      "Adding value: [ -57.2274 -673.2127] to CCS.\n",
+      "Value [ -57.2274 -673.2127] is dominated. Discarding.\n",
+      "Adding value: [ -50.599  -680.7532] to CCS.\n",
+      "Value [ -50.599  -680.7532] is dominated. Discarding.\n",
+      "Adding value: [ -50.568  -702.9788] to CCS.\n",
+      "Value [ -50.568  -702.9788] is dominated. Discarding.\n",
+      "Adding value: [ -52.3752 -671.1346] to CCS.\n",
+      "Value [ -52.3752 -671.1346] is dominated. Discarding.\n",
+      "Adding value: [ -52.4622 -678.6712] to CCS.\n",
+      "Value [ -52.4622 -678.6712] is dominated. Discarding.\n",
+      "Adding value: [ -55.6256 -684.2521] to CCS.\n",
+      "Value [ -55.6256 -684.2521] is dominated. Discarding.\n",
+      "W_corner: [array([0.7347, 0.2653]), array([0.9916, 0.0084]), array([1., 0.]), array([0.8544, 0.1456]), array([0., 1.]), array([0.5492, 0.4508])] W_corner size: 6\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.5231, -682.8264], dtype=float32), array([ -48.2842, -710.9747]), array([ -49.8447, -675.0713]), array([ -50.6938, -672.7194])] CCS size: 5\n",
+      "Next weight: [0.5492 0.4508]\n",
+      "Next weight vector: [0.5492 0.4508]\n",
+      "Adding value: [ -48.0814 -682.6679] to CCS.\n",
+      "removed value [ -48.2842 -710.9747]\n",
+      "removed value [ -48.5231 -682.8264]\n",
+      "Adding value: [ -50.4146 -688.6003] to CCS.\n",
+      "Value [ -50.4146 -688.6003] is dominated. Discarding.\n",
+      "Adding value: [ -53.3258 -687.6753] to CCS.\n",
+      "Value [ -53.3258 -687.6753] is dominated. Discarding.\n",
+      "Adding value: [ -50.6916 -696.9212] to CCS.\n",
+      "Value [ -50.6916 -696.9212] is dominated. Discarding.\n",
+      "Adding value: [ -61.7196 -676.9851] to CCS.\n",
+      "Value [ -61.7196 -676.9851] is dominated. Discarding.\n",
+      "Adding value: [ -52.6892 -692.8576] to CCS.\n",
+      "Value [ -52.6892 -692.8576] is dominated. Discarding.\n",
+      "Adding value: [ -53.7859 -676.9015] to CCS.\n",
+      "Value [ -53.7859 -676.9015] is dominated. Discarding.\n",
+      "Adding value: [ -52.7005 -667.0067] to CCS.\n",
+      "removed value [ -50.6938 -672.7194]\n",
+      "removed value [ -49.8447 -675.0713]\n",
+      "Adding value: [ -53.7215 -683.6246] to CCS.\n",
+      "Value [ -53.7215 -683.6246] is dominated. Discarding.\n",
+      "Adding value: [ -52.8522 -687.8447] to CCS.\n",
+      "Value [ -52.8522 -687.8447] is dominated. Discarding.\n",
+      "W_corner: [array([0.7722, 0.2278]), array([1., 0.]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 4\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.0814, -682.6679], dtype=float32), array([ -52.7005, -667.0067])] CCS size: 3\n",
+      "Next weight: [0.4504 0.5496]\n",
+      "Next weight vector: [0.4504 0.5496]\n",
+      "Adding value: [ -46.9447 -705.5519] to CCS.\n",
+      "Adding value: [ -52.1225 -701.7673] to CCS.\n",
+      "Value [ -52.1225 -701.7673] is dominated. Discarding.\n",
+      "Adding value: [ -52.0737 -682.4672] to CCS.\n",
+      "Value [ -52.0737 -682.4672] is dominated. Discarding.\n",
+      "Adding value: [ -51.0366 -689.3506] to CCS.\n",
+      "Value [ -51.0366 -689.3506] is dominated. Discarding.\n",
+      "Adding value: [ -53.7481 -694.0552] to CCS.\n",
+      "Value [ -53.7481 -694.0552] is dominated. Discarding.\n",
+      "Adding value: [ -49.9776 -706.0867] to CCS.\n",
+      "Value [ -49.9776 -706.0867] is dominated. Discarding.\n",
+      "Adding value: [ -52.7385 -671.2767] to CCS.\n",
+      "Value [ -52.7385 -671.2767] is dominated. Discarding.\n",
+      "W_corner: [array([0.7722, 0.2278]), array([1., 0.]), array([0.9527, 0.0473]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 5\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.0814, -682.6679], dtype=float32), array([ -52.7005, -667.0067]), array([ -46.9447, -705.5519], dtype=float32)] CCS size: 4\n",
+      "Next weight: [0.7722 0.2278]\n",
+      "Next weight vector: [0.7722 0.2278]\n",
+      "Adding value: [ -52.9049 -689.9227] to CCS.\n",
+      "Value [ -52.9049 -689.9227] is dominated. Discarding.\n",
+      "Adding value: [ -58.0094 -667.8571] to CCS.\n",
+      "Value [ -58.0094 -667.8571] is dominated. Discarding.\n",
+      "Adding value: [ -51.8317 -695.2316] to CCS.\n",
+      "Value [ -51.8317 -695.2316] is dominated. Discarding.\n",
+      "Adding value: [ -47.6213 -701.1628] to CCS.\n",
+      "Value [ -47.6213 -701.1628] is dominated. Discarding.\n",
+      "Adding value: [ -59.2411 -689.6294] to CCS.\n",
+      "Value [ -59.2411 -689.6294] is dominated. Discarding.\n",
+      "Adding value: [ -53.5062 -688.4479] to CCS.\n",
+      "Value [ -53.5062 -688.4479] is dominated. Discarding.\n",
+      "Adding value: [ -60.8594 -669.181 ] to CCS.\n",
+      "Value [ -60.8594 -669.181 ] is dominated. Discarding.\n",
+      "Adding value: [ -53.9663 -672.3849] to CCS.\n",
+      "Value [ -53.9663 -672.3849] is dominated. Discarding.\n",
+      "Adding value: [ -60.175  -682.3976] to CCS.\n",
+      "Value [ -60.175  -682.3976] is dominated. Discarding.\n",
+      "W_corner: [array([0.7722, 0.2278]), array([1., 0.]), array([0.9527, 0.0473]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 5\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.0814, -682.6679], dtype=float32), array([ -52.7005, -667.0067]), array([ -46.9447, -705.5519], dtype=float32)] CCS size: 4\n",
+      "Next weight: [0.4504 0.5496]\n",
+      "Next weight vector: [0.4504 0.5496]\n",
+      "Adding value: [ -51.1046 -678.4728] to CCS.\n",
+      "Value [ -51.1046 -678.4728] is dominated. Discarding.\n",
+      "Adding value: [ -54.0579 -686.6076] to CCS.\n",
+      "Value [ -54.0579 -686.6076] is dominated. Discarding.\n",
+      "Adding value: [ -50.2105 -680.5493] to CCS.\n",
+      "Value [ -50.2105 -680.5493] is dominated. Discarding.\n",
+      "Adding value: [ -60.0558 -684.7238] to CCS.\n",
+      "Value [ -60.0558 -684.7238] is dominated. Discarding.\n",
+      "Adding value: [ -57.586 -676.046] to CCS.\n",
+      "Value [ -57.586 -676.046] is dominated. Discarding.\n",
+      "Adding value: [ -57.0927 -688.8501] to CCS.\n",
+      "Value [ -57.0927 -688.8501] is dominated. Discarding.\n",
+      "Adding value: [ -47.5213 -689.5764] to CCS.\n",
+      "Adding value: [ -59.6446 -662.2466] to CCS.\n",
+      "Value [ -59.6446 -662.2466] is dominated. Discarding.\n",
+      "Adding value: [ -50.0606 -697.1553] to CCS.\n",
+      "Value [ -50.0606 -697.1553] is dominated. Discarding.\n",
+      "W_corner: [array([0.7722, 0.2278]), array([0.9652, 0.0348]), array([1., 0.]), array([0.925, 0.075]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 6\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -48.0814, -682.6679], dtype=float32), array([ -52.7005, -667.0067]), array([ -46.9447, -705.5519], dtype=float32), array([ -47.5213, -689.5764])] CCS size: 5\n",
       "Next weight: [0. 1.]\n",
       "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -6.7070e-03] to CCS.\n",
-      "Adding value: [-99.9808 -47.8051] to CCS.\n",
-      "removed value [-9.9996e+01 -6.7070e-03]\n",
-      "Adding value: [-9.9996e+01 -8.7628e-03] to CCS.\n",
-      "Value [-9.9996e+01 -8.7628e-03] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([9.9969e-01, 3.0950e-04]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.9808, -47.8051])] CCS size: 2\n",
+      "Adding value: [ -53.2608 -685.056 ] to CCS.\n",
+      "Value [ -53.2608 -685.056 ] is dominated. Discarding.\n",
+      "Adding value: [ -46.0379 -686.5776] to CCS.\n",
+      "removed value [ -47.5213 -689.5764]\n",
+      "removed value [ -46.9447 -705.5519]\n",
+      "removed value [ -48.0814 -682.6679]\n",
+      "Adding value: [ -54.7477 -679.4895] to CCS.\n",
+      "Value [ -54.7477 -679.4895] is dominated. Discarding.\n",
+      "Adding value: [ -47.8712 -679.6314] to CCS.\n",
+      "Adding value: [ -52.4351 -684.4176] to CCS.\n",
+      "Value [ -52.4351 -684.4176] is dominated. Discarding.\n",
+      "Adding value: [ -50.4238 -701.0701] to CCS.\n",
+      "Value [ -50.4238 -701.0701] is dominated. Discarding.\n",
+      "Adding value: [ -54.2221 -674.6663] to CCS.\n",
+      "Value [ -54.2221 -674.6663] is dominated. Discarding.\n",
+      "Adding value: [ -50.7366 -678.8334] to CCS.\n",
+      "Value [ -50.7366 -678.8334] is dominated. Discarding.\n",
+      "Adding value: [ -54.016  -668.5583] to CCS.\n",
+      "Value [ -54.016  -668.5583] is dominated. Discarding.\n",
+      "Adding value: [ -47.4963 -688.493 ] to CCS.\n",
+      "Value [ -47.4963 -688.493 ] is dominated. Discarding.\n",
+      "W_corner: [array([0.7233, 0.2767]), array([1., 0.]), array([0.7912, 0.2088]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 5\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -52.7005, -667.0067]), array([ -46.0379, -686.5776], dtype=float32), array([ -47.8712, -679.6314], dtype=float32)] CCS size: 4\n",
+      "Next weight: [0.7912 0.2088]\n",
+      "Next weight vector: [0.7912 0.2088]\n",
+      "Adding value: [ -48.6612 -686.9763] to CCS.\n",
+      "Value [ -48.6612 -686.9763] is dominated. Discarding.\n",
+      "Adding value: [ -49.9725 -687.0149] to CCS.\n",
+      "Value [ -49.9725 -687.0149] is dominated. Discarding.\n",
+      "Adding value: [ -54.9718 -679.788 ] to CCS.\n",
+      "Value [ -54.9718 -679.788 ] is dominated. Discarding.\n",
+      "Adding value: [ -52.4317 -678.7336] to CCS.\n",
+      "Value [ -52.4317 -678.7336] is dominated. Discarding.\n",
+      "Adding value: [ -54.4005 -681.7963] to CCS.\n",
+      "Value [ -54.4005 -681.7963] is dominated. Discarding.\n",
+      "Adding value: [ -54.8261 -691.7544] to CCS.\n",
+      "Value [ -54.8261 -691.7544] is dominated. Discarding.\n",
+      "Adding value: [ -51.7816 -680.4628] to CCS.\n",
+      "Value [ -51.7816 -680.4628] is dominated. Discarding.\n",
+      "Adding value: [ -49.0652 -710.4045] to CCS.\n",
+      "Value [ -49.0652 -710.4045] is dominated. Discarding.\n",
+      "Adding value: [ -46.5517 -695.4418] to CCS.\n",
+      "Value [ -46.5517 -695.4418] is dominated. Discarding.\n",
+      "W_corner: [array([0.7233, 0.2767]), array([1., 0.]), array([0.7912, 0.2088]), array([0., 1.]), array([0.4504, 0.5496])] W_corner size: 5\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -52.7005, -667.0067]), array([ -46.0379, -686.5776], dtype=float32), array([ -47.8712, -679.6314], dtype=float32)] CCS size: 4\n",
+      "Next weight: [0.7912 0.2088]\n",
+      "Next weight vector: [0.7912 0.2088]\n",
+      "Adding value: [ -56.4391 -670.827 ] to CCS.\n",
+      "Value [ -56.4391 -670.827 ] is dominated. Discarding.\n",
+      "Adding value: [ -50.0855 -663.4104] to CCS.\n",
+      "removed value [ -47.8712 -679.6314]\n",
+      "removed value [ -52.7005 -667.0067]\n",
+      "Adding value: [ -50.9177 -694.5486] to CCS.\n",
+      "Value [ -50.9177 -694.5486] is dominated. Discarding.\n",
+      "Adding value: [ -51.3506 -698.2275] to CCS.\n",
+      "Value [ -51.3506 -698.2275] is dominated. Discarding.\n",
+      "Adding value: [ -49.8724 -696.474 ] to CCS.\n",
+      "Value [ -49.8724 -696.474 ] is dominated. Discarding.\n",
+      "Adding value: [ -52.74   -682.3124] to CCS.\n",
+      "Value [ -52.74   -682.3124] is dominated. Discarding.\n",
+      "Adding value: [ -50.788  -677.7413] to CCS.\n",
+      "Value [ -50.788  -677.7413] is dominated. Discarding.\n",
+      "Adding value: [ -51.4994 -699.6786] to CCS.\n",
+      "Value [ -51.4994 -699.6786] is dominated. Discarding.\n",
+      "Adding value: [ -53.6174 -668.4641] to CCS.\n",
+      "Value [ -53.6174 -668.4641] is dominated. Discarding.\n",
+      "W_corner: [array([0.8513, 0.1487]), array([1., 0.]), array([0., 1.]), array([0.2241, 0.7759])] W_corner size: 4\n",
+      "CCS: [array([ -60.9007, -660.2865], dtype=float32), array([ -46.0379, -686.5776], dtype=float32), array([ -50.0855, -663.4104])] CCS size: 3\n",
+      "Next weight: [0.2241 0.7759]\n",
+      "Next weight vector: [0.2241 0.7759]\n",
+      "Adding value: [ -50.7605 -690.9933] to CCS.\n",
+      "Value [ -50.7605 -690.9933] is dominated. Discarding.\n",
+      "Adding value: [ -48.3392 -691.371 ] to CCS.\n",
+      "Value [ -48.3392 -691.371 ] is dominated. Discarding.\n",
+      "Adding value: [ -50.8369 -692.8957] to CCS.\n",
+      "Value [ -50.8369 -692.8957] is dominated. Discarding.\n",
+      "Adding value: [ -54.5701 -672.832 ] to CCS.\n",
+      "Value [ -54.5701 -672.832 ] is dominated. Discarding.\n",
+      "Adding value: [ -43.9819 -694.6178] to CCS.\n",
+      "removed value [ -46.0379 -686.5776]\n",
+      "Adding value: [ -53.0096 -692.5447] to CCS.\n",
+      "Value [ -53.0096 -692.5447] is dominated. Discarding.\n",
+      "Adding value: [ -56.0643 -657.4069] to CCS.\n",
+      "removed value [ -60.9007 -660.2865]\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -56.1861 -689.9437] to CCS.\n",
+      "Value [ -56.1861 -689.9437] is dominated. Discarding.\n",
+      "Adding value: [ -46.2687 -701.9428] to CCS.\n",
+      "Value [ -46.2687 -701.9428] is dominated. Discarding.\n",
+      "Adding value: [ -54.0767 -680.93  ] to CCS.\n",
+      "Value [ -54.0767 -680.93  ] is dominated. Discarding.\n",
+      "Adding value: [ -47.9683 -683.3679] to CCS.\n",
+      "Value [ -47.9683 -683.3679] is dominated. Discarding.\n",
+      "Adding value: [ -55.1319 -683.3105] to CCS.\n",
+      "Value [ -55.1319 -683.3105] is dominated. Discarding.\n",
+      "Adding value: [ -55.1065 -674.7167] to CCS.\n",
+      "Value [ -55.1065 -674.7167] is dominated. Discarding.\n",
+      "Adding value: [ -56.5463 -672.4869] to CCS.\n",
+      "Value [ -56.5463 -672.4869] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -55.2304 -676.2763] to CCS.\n",
+      "Value [ -55.2304 -676.2763] is dominated. Discarding.\n",
+      "Adding value: [ -51.6822 -682.1677] to CCS.\n",
+      "Value [ -51.6822 -682.1677] is dominated. Discarding.\n",
+      "Adding value: [ -50.8519 -695.8137] to CCS.\n",
+      "Value [ -50.8519 -695.8137] is dominated. Discarding.\n",
+      "Adding value: [ -51.4681 -674.0744] to CCS.\n",
+      "Value [ -51.4681 -674.0744] is dominated. Discarding.\n",
+      "Adding value: [ -50.3404 -694.3182] to CCS.\n",
+      "Value [ -50.3404 -694.3182] is dominated. Discarding.\n",
+      "Adding value: [ -55.5849 -663.371 ] to CCS.\n",
+      "Value [ -55.5849 -663.371 ] is dominated. Discarding.\n",
+      "Adding value: [ -55.4139 -685.7287] to CCS.\n",
+      "Value [ -55.4139 -685.7287] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [0.8364 0.1636]\n",
+      "Next weight vector: [0.8364 0.1636]\n",
+      "Adding value: [ -54.6493 -690.557 ] to CCS.\n",
+      "Value [ -54.6493 -690.557 ] is dominated. Discarding.\n",
+      "Adding value: [ -51.9287 -673.9105] to CCS.\n",
+      "Value [ -51.9287 -673.9105] is dominated. Discarding.\n",
+      "Adding value: [ -57.5799 -668.7855] to CCS.\n",
+      "Value [ -57.5799 -668.7855] is dominated. Discarding.\n",
+      "Adding value: [ -54.1051 -698.4537] to CCS.\n",
+      "Value [ -54.1051 -698.4537] is dominated. Discarding.\n",
+      "Adding value: [ -55.0566 -670.9513] to CCS.\n",
+      "Value [ -55.0566 -670.9513] is dominated. Discarding.\n",
+      "Adding value: [ -48.5403 -688.2765] to CCS.\n",
+      "Value [ -48.5403 -688.2765] is dominated. Discarding.\n",
+      "Adding value: [ -53.96   -677.0279] to CCS.\n",
+      "Value [ -53.96   -677.0279] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [ -57.2693 -694.9041] to CCS.\n",
+      "Value [ -57.2693 -694.9041] is dominated. Discarding.\n",
+      "Adding value: [ -48.1334 -678.9614] to CCS.\n",
+      "Value [ -48.1334 -678.9614] is dominated. Discarding.\n",
+      "Adding value: [ -53.5584 -696.0296] to CCS.\n",
+      "Value [ -53.5584 -696.0296] is dominated. Discarding.\n",
+      "Adding value: [ -54.4364 -698.5994] to CCS.\n",
+      "Value [ -54.4364 -698.5994] is dominated. Discarding.\n",
+      "Adding value: [ -49.7978 -686.9517] to CCS.\n",
+      "Value [ -49.7978 -686.9517] is dominated. Discarding.\n",
+      "Adding value: [ -58.2975 -695.559 ] to CCS.\n",
+      "Value [ -58.2975 -695.559 ] is dominated. Discarding.\n",
+      "Adding value: [ -49.0191 -693.1766] to CCS.\n",
+      "Value [ -49.0191 -693.1766] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
       "Next weight: [1. 0.]\n",
       "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -1.9521e-02] to CCS.\n",
-      "Value [-9.9996e+01 -1.9521e-02] is dominated. Discarding.\n",
-      "Adding value: [-99.6818 -68.2385] to CCS.\n",
-      "removed value [-99.9808 -47.8051]\n",
-      "Adding value: [-99.9753 -65.719 ] to CCS.\n",
-      "Value [-99.9753 -65.719 ] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1421] to CCS.\n",
-      "Value [-99.9956  -0.1421] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.2368] to CCS.\n",
-      "Value [-99.9956 -64.2368] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
-      "Next weight: [0.9954 0.0046]\n",
-      "Next weight vector: [0.9954 0.0046]\n",
-      "Adding value: [-9.9996e+01 -4.8593e-02] to CCS.\n",
-      "Value [-9.9996e+01 -4.8593e-02] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.5916] to CCS.\n",
-      "Value [-99.9956 -64.5916] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1756] to CCS.\n",
-      "Value [-99.9956  -0.1756] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -66.1056] to CCS.\n",
-      "Value [-99.9956 -66.1056] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -65.9382] to CCS.\n",
-      "Value [-99.9956 -65.9382] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
-      "Next weight: [0.9954 0.0046]\n",
-      "Next weight vector: [0.9954 0.0046]\n",
-      "Adding value: [-99.9956  -0.1548] to CCS.\n",
-      "Value [-99.9956  -0.1548] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.2804] to CCS.\n",
-      "Value [-99.9956 -64.2804] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1292] to CCS.\n",
-      "Value [-99.9956  -0.1292] is dominated. Discarding.\n",
-      "Adding value: [-99.9751 -64.9296] to CCS.\n",
-      "Value [-99.9751 -64.9296] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -65.9157] to CCS.\n",
-      "Value [-99.9956 -65.9157] is dominated. Discarding.\n"
+      "Adding value: [ -46.3179 -685.4135] to CCS.\n",
+      "Value [ -46.3179 -685.4135] is dominated. Discarding.\n",
+      "Adding value: [ -54.9462 -667.3486] to CCS.\n",
+      "Value [ -54.9462 -667.3486] is dominated. Discarding.\n",
+      "Adding value: [ -48.2423 -692.2408] to CCS.\n",
+      "Value [ -48.2423 -692.2408] is dominated. Discarding.\n",
+      "Adding value: [ -49.0004 -706.2313] to CCS.\n",
+      "Value [ -49.0004 -706.2313] is dominated. Discarding.\n",
+      "Adding value: [ -59.4453 -685.207 ] to CCS.\n",
+      "Value [ -59.4453 -685.207 ] is dominated. Discarding.\n",
+      "Adding value: [ -49.936  -665.8168] to CCS.\n",
+      "Value [ -49.936  -665.8168] is dominated. Discarding.\n",
+      "Adding value: [ -48.9909 -684.0145] to CCS.\n",
+      "Value [ -48.9909 -684.0145] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [0.8364 0.1636]\n",
+      "Next weight vector: [0.8364 0.1636]\n",
+      "Adding value: [ -56.9697 -674.9161] to CCS.\n",
+      "Value [ -56.9697 -674.9161] is dominated. Discarding.\n",
+      "Adding value: [ -48.202  -698.8588] to CCS.\n",
+      "Value [ -48.202  -698.8588] is dominated. Discarding.\n",
+      "Adding value: [ -54.7516 -701.1217] to CCS.\n",
+      "Value [ -54.7516 -701.1217] is dominated. Discarding.\n",
+      "Adding value: [ -51.6814 -682.1043] to CCS.\n",
+      "Value [ -51.6814 -682.1043] is dominated. Discarding.\n",
+      "Adding value: [ -48.6276 -714.7781] to CCS.\n",
+      "Value [ -48.6276 -714.7781] is dominated. Discarding.\n",
+      "Adding value: [ -52.7446 -698.862 ] to CCS.\n",
+      "Value [ -52.7446 -698.862 ] is dominated. Discarding.\n",
+      "Adding value: [ -54.384  -687.5884] to CCS.\n",
+      "Value [ -54.384  -687.5884] is dominated. Discarding.\n",
+      "W_corner: [array([0.8364, 0.1636]), array([1., 0.]), array([0., 1.]), array([0.501, 0.499])] W_corner size: 4\n",
+      "CCS: [array([ -50.0855, -663.4104]), array([ -43.9819, -694.6178]), array([ -56.0643, -657.4069])] CCS size: 3\n",
+      "Next weight: [0.501 0.499]\n",
+      "Next weight vector: [0.501 0.499]\n",
+      "Adding value: [ -48.1973 -699.6417] to CCS.\n",
+      "Value [ -48.1973 -699.6417] is dominated. Discarding.\n",
+      "Adding value: [ -53.6457 -676.7676] to CCS.\n",
+      "Value [ -53.6457 -676.7676] is dominated. Discarding.\n",
+      "Adding value: [ -52.7022 -684.641 ] to CCS.\n",
+      "Value [ -52.7022 -684.641 ] is dominated. Discarding.\n",
+      "Adding value: [ -54.2705 -670.0124] to CCS.\n",
+      "Value [ -54.2705 -670.0124] is dominated. Discarding.\n",
+      "Adding value: [ -50.3728 -684.9796] to CCS.\n",
+      "Value [ -50.3728 -684.9796] is dominated. Discarding.\n",
+      "Adding value: [ -45.9733 -685.9054] to CCS.\n",
+      "Value [ -45.9733 -685.9054] is dominated. Discarding.\n",
+      "Adding value: [ -48.4939 -689.5692] to CCS.\n",
+      "Value [ -48.4939 -689.5692] is dominated. Discarding.\n"
      ]
-    }
-   ],
-   "source": [
-    "env = mo_gym.make('mo-mountaincarcontinuous-v0')\n",
-    "\n",
-    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_cart')\n",
-    "\n",
-    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32))"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▄▁▂▆▅▄▄▅▆▇▄▅▅▂▇▅▄▄▇█</td></tr><tr><td>iteration</td><td>▁▁▂▂▂▃▃▄▄▄▅▅▅▆▆▇▇▇██</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-369.14562</td></tr><tr><td>iteration</td><td>20</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_norm__None__1683192732</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/ar8x37f6' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/ar8x37f6</a><br/>Synced 7 W&B file(s), 20 media file(s), 20 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230504_113215-ar8x37f6\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=100)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_norm', learning_starts=1000)\n",
+    "\n",
+    "GPIAgent.train(200000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=10000, eval_freq=1000, num_eval_episodes_for_front=25)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_pf('./2obj_norm_moreInitExpl.csv')"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Once again, the flooding objective has has better returns. When compared to the experiment where learning_starts is set at lower value, the returns have improved very slightly.\n"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Reducing the stochasticity of the environment\n",
+    "\n",
+    "The dam inflow was previously determined by a normal distribution with mean 40 and std 10.\n",
+    "\n",
+    "Try to reduce the stdev to 1 to get an understanding of the influence of the randomness on the algorithm:\n",
+    "\n",
+    "### Normalised actions\n",
+    "\n",
+    "Less eval episodes are needed because of the decrease in randomness"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.15.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230506_153536-smo0mxmw</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/smo0mxmw' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_norm_lowerstdev__None__1683380132</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/smo0mxmw' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/smo0mxmw</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_norm_lowerstdev\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -638.4866] to CCS.\n",
+      "Adding value: [   0.    -636.994] to CCS.\n",
+      "removed value [   0.     -638.4866]\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -636.994], dtype=float32)] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -636.3579] to CCS.\n",
+      "removed value [   0.    -636.994]\n",
+      "Adding value: [   0.     -638.8249] to CCS.\n",
+      "Adding value: [   0.     -636.3111] to CCS.\n",
+      "removed value [   0.     -638.8249]\n",
+      "removed value [   0.     -636.3579]\n",
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -636.3111])] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -638.7521] to CCS.\n",
+      "Adding value: [   0.     -636.0081] to CCS.\n",
+      "removed value [   0.     -638.7521]\n",
+      "removed value [   0.     -636.3111]\n",
+      "Adding value: [   0.     -634.9864] to CCS.\n",
+      "removed value [   0.     -636.0081]\n",
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -634.9864])] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -645.6574] to CCS.\n",
+      "Adding value: [   0.     -625.7798] to CCS.\n",
+      "removed value [   0.     -645.6574]\n",
+      "removed value [   0.     -634.9864]\n",
+      "Adding value: [   0.     -629.9309] to CCS.\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -625.7798]), array([   0.    , -629.9309])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -621.1978] to CCS.\n",
+      "removed value [   0.     -629.9309]\n",
+      "removed value [   0.     -625.7798]\n",
+      "Adding value: [   0.     -630.9665] to CCS.\n",
+      "Adding value: [   0.     -636.1755] to CCS.\n",
+      "removed value [   0.     -630.9665]\n",
+      "Adding value: [   0.    -627.723] to CCS.\n",
+      "removed value [   0.     -636.1755]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -621.1978]), array([   0.   , -627.723])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -626.3044] to CCS.\n",
+      "removed value [   0.    -627.723]\n",
+      "Adding value: [   0.    -635.744] to CCS.\n",
+      "removed value [   0.     -626.3044]\n",
+      "Adding value: [   0.     -629.7186] to CCS.\n",
+      "removed value [   0.    -635.744]\n",
+      "Adding value: [   0.     -629.9937] to CCS.\n",
+      "removed value [   0.     -629.7186]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -621.1978]), array([   0.    , -629.9937])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -622.9719] to CCS.\n",
+      "removed value [   0.     -629.9937]\n",
+      "Adding value: [   0.     -633.5178] to CCS.\n",
+      "removed value [   0.     -622.9719]\n",
+      "Adding value: [   0.     -627.9832] to CCS.\n",
+      "removed value [   0.     -633.5178]\n",
+      "Adding value: [   0.     -637.4819] to CCS.\n",
+      "removed value [   0.     -627.9832]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -621.1978]), array([   0.    , -637.4819])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -632.6424] to CCS.\n",
+      "removed value [   0.     -637.4819]\n",
+      "Adding value: [   0.     -637.3534] to CCS.\n",
+      "removed value [   0.     -632.6424]\n",
+      "Adding value: [   0.     -623.0462] to CCS.\n",
+      "removed value [   0.     -637.3534]\n",
+      "Adding value: [   0.     -643.0918] to CCS.\n",
+      "removed value [   0.     -623.0462]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -621.1978]), array([   0.    , -643.0918])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -640.4229] to CCS.\n",
+      "removed value [   0.     -643.0918]\n",
+      "Adding value: [   0.   -638.91] to CCS.\n",
+      "removed value [   0.     -640.4229]\n",
+      "Adding value: [   0.     -619.6708] to CCS.\n",
+      "removed value [   0.   -638.91]\n",
+      "removed value [   0.     -621.1978]\n",
+      "Adding value: [   0.     -619.2796] to CCS.\n",
+      "removed value [   0.     -619.6708]\n",
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -619.2796])] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -627.8527] to CCS.\n",
+      "Adding value: [   0.     -631.7695] to CCS.\n",
+      "removed value [   0.     -627.8527]\n",
+      "Adding value: [   0.    -638.228] to CCS.\n",
+      "removed value [   0.     -631.7695]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -619.2796]), array([   0.   , -638.228])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -632.7324] to CCS.\n",
+      "removed value [   0.    -638.228]\n",
+      "Adding value: [   0.     -645.0931] to CCS.\n",
+      "removed value [   0.     -632.7324]\n",
+      "Adding value: [   0.     -626.1493] to CCS.\n",
+      "removed value [   0.     -645.0931]\n",
+      "Adding value: [   0.     -630.6816] to CCS.\n",
+      "removed value [   0.     -626.1493]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -619.2796]), array([   0.    , -630.6816])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -632.9026] to CCS.\n",
+      "removed value [   0.     -630.6816]\n",
+      "Adding value: [   0.     -628.3441] to CCS.\n",
+      "removed value [   0.     -632.9026]\n",
+      "Adding value: [   0.    -628.396] to CCS.\n",
+      "removed value [   0.     -628.3441]\n",
+      "Adding value: [   0.     -625.1012] to CCS.\n",
+      "removed value [   0.    -628.396]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -619.2796]), array([   0.    , -625.1012])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -634.5467] to CCS.\n",
+      "removed value [   0.     -625.1012]\n",
+      "Adding value: [   0.     -642.9692] to CCS.\n",
+      "removed value [   0.     -634.5467]\n",
+      "Adding value: [   0.   -625.95] to CCS.\n",
+      "removed value [   0.     -642.9692]\n",
+      "Adding value: [   0.     -625.3148] to CCS.\n",
+      "removed value [   0.   -625.95]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.    , -619.2796]), array([   0.    , -625.3148])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -622.0459] to CCS.\n",
+      "removed value [   0.     -625.3148]\n",
+      "Adding value: [   0.    -635.151] to CCS.\n",
+      "removed value [   0.     -622.0459]\n",
+      "Adding value: [   0.    -619.273] to CCS.\n",
+      "removed value [   0.    -635.151]\n",
+      "removed value [   0.     -619.2796]\n",
+      "Adding value: [   0.     -635.6919] to CCS.\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.    , -635.6919])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -623.5882] to CCS.\n",
+      "removed value [   0.     -635.6919]\n",
+      "Adding value: [   0.     -634.2316] to CCS.\n",
+      "removed value [   0.     -623.5882]\n",
+      "Adding value: [   0.     -631.8931] to CCS.\n",
+      "removed value [   0.     -634.2316]\n",
+      "Adding value: [   0.     -626.1381] to CCS.\n",
+      "removed value [   0.     -631.8931]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.    , -626.1381])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -629.1967] to CCS.\n",
+      "removed value [   0.     -626.1381]\n",
+      "Adding value: [   0.     -623.9482] to CCS.\n",
+      "removed value [   0.     -629.1967]\n",
+      "Adding value: [   0.     -642.0053] to CCS.\n",
+      "removed value [   0.     -623.9482]\n",
+      "Adding value: [   0.     -629.8067] to CCS.\n",
+      "removed value [   0.     -642.0053]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.    , -629.8067])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -636.3484] to CCS.\n",
+      "removed value [   0.     -629.8067]\n",
+      "Adding value: [   0.    -619.839] to CCS.\n",
+      "removed value [   0.     -636.3484]\n",
+      "Adding value: [   0.     -630.1199] to CCS.\n",
+      "removed value [   0.    -619.839]\n",
+      "Adding value: [   0.    -629.192] to CCS.\n",
+      "removed value [   0.     -630.1199]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.   , -629.192])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -634.2631] to CCS.\n",
+      "removed value [   0.    -629.192]\n",
+      "Adding value: [   0.     -630.2833] to CCS.\n",
+      "removed value [   0.     -634.2631]\n",
+      "Adding value: [   0.     -628.4533] to CCS.\n",
+      "removed value [   0.     -630.2833]\n",
+      "Adding value: [   0.     -625.4013] to CCS.\n",
+      "removed value [   0.     -628.4533]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.    , -625.4013])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [   0.     -623.9917] to CCS.\n",
+      "removed value [   0.     -625.4013]\n",
+      "Adding value: [   0.     -631.2716] to CCS.\n",
+      "removed value [   0.     -623.9917]\n",
+      "Adding value: [   0.     -624.8463] to CCS.\n",
+      "removed value [   0.     -631.2716]\n",
+      "Adding value: [   0.     -634.1961] to CCS.\n",
+      "removed value [   0.     -624.8463]\n",
+      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
+      "CCS: [array([   0.   , -619.273]), array([   0.    , -634.1961])] CCS size: 2\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [   0.     -634.4016] to CCS.\n",
+      "removed value [   0.     -634.1961]\n",
+      "Adding value: [   0.     -626.2009] to CCS.\n",
+      "removed value [   0.     -634.4016]\n",
+      "Adding value: [   0.     -632.3764] to CCS.\n",
+      "removed value [   0.     -626.2009]\n",
+      "Adding value: [   0.     -632.1661] to CCS.\n",
+      "removed value [   0.     -632.3764]\n"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-2-40b8a35785ec>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mGPIAgent\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mGPIPDContinuousAction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mper\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdyna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexperiment_name\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'gpi-ls_2_obj_norm_lowerstdev'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlearning_starts\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mGPIAgent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m200000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mref_point\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimesteps_per_iter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_freq\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36mtrain\u001b[1;34m(self, total_timesteps, eval_env, ref_point, known_pareto_front, num_eval_weights_for_front, num_eval_episodes_for_front, weight_selection_algo, timesteps_per_iter, eval_freq)\u001b[0m\n\u001b[0;32m    650\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    651\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 652\u001b[1;33m                 gpi_returns_test_tasks = [\n\u001b[0m\u001b[0;32m    653\u001b[0m                     \u001b[0mpolicy_evaluation_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mew\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mew\u001b[0m \u001b[1;32min\u001b[0m \u001b[0meval_weights\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    654\u001b[0m                 ]\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    651\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    652\u001b[0m                 gpi_returns_test_tasks = [\n\u001b[1;32m--> 653\u001b[1;33m                     \u001b[0mpolicy_evaluation_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mew\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mew\u001b[0m \u001b[1;32min\u001b[0m \u001b[0meval_weights\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    654\u001b[0m                 ]\n\u001b[0;32m    655\u001b[0m                 log_all_multi_policy_metrics(\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36mpolicy_evaluation_mo\u001b[1;34m(agent, env, w, rep)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36meval_mo\u001b[1;34m(agent, env, w, scalarization, render)\u001b[0m\n\u001b[0;32m     32\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mrender\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m             \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m         \u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mterminated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minfo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m         \u001b[0mdone\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mterminated\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[0mvec_return\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\autograd\\grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     25\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 27\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     28\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mF\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36meval\u001b[1;34m(self, obs, w, torch_action)\u001b[0m\n\u001b[0;32m    455\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0muse_gpi\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    456\u001b[0m             \u001b[0mobs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 457\u001b[1;33m             \u001b[0mactions_original\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpolicy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstacked_weight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    458\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    459\u001b[0m             \u001b[0mobs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, obs, w, noise, noise_clip)\u001b[0m\n\u001b[0;32m     51\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnoise\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnoise_clip\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     52\u001b[0m         \u001b[1;34m\"\"\"Forward pass of the policy network.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 53\u001b[1;33m         \u001b[0mh\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlatent_pi\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     54\u001b[0m         \u001b[0maction\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mh\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     55\u001b[0m         \u001b[0maction\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtanh\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maction\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    202\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    203\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 204\u001b[1;33m             \u001b[0minput\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    205\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    206\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\linear.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    112\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    113\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 114\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    115\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    116\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=100)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_norm_lowerstdev', learning_starts=1000)\n",
+    "\n",
+    "GPIAgent.train(200000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=10000, eval_freq=1000, num_eval_episodes_for_front=5)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "plot_pf('./2obj_norm_lessvariance.csv')"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "These results do not prove anything..."
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Absolute actions\n",
+    "\n",
+    "- Capped at 250.0\n",
+    "- stdev = 1.0"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.15.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230508_114813-17gfm4v3</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/17gfm4v3' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_lowerstdev__None__1683539290</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/17gfm4v3' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/17gfm4v3</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_lowerstdev\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-13289.112  -13920.2705] to CCS.\n",
+      "Adding value: [-13222.192 -13849.83 ] to CCS.\n",
+      "removed value [-13289.112  -13920.2705]\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([-13222.192, -13849.83 ], dtype=float32)] CCS size: 1\n",
+      "Next weight: [0. 1.]\n",
+      "Next weight vector: [0. 1.]\n",
+      "Adding value: [-13290.987 -13928.823] to CCS.\n",
+      "Value [-13290.987 -13928.823] is dominated. Discarding.\n",
+      "Adding value: [-13280.4837 -13903.6143] to CCS.\n",
+      "Value [-13280.4837 -13903.6143] is dominated. Discarding.\n",
+      "Adding value: [-13304.5884 -13948.2236] to CCS.\n",
+      "Value [-13304.5884 -13948.2236] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([-13222.192, -13849.83 ], dtype=float32)] CCS size: 1\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [-13227.669 -13853.385] to CCS.\n",
+      "Value [-13227.669 -13853.385] is dominated. Discarding.\n",
+      "Adding value: [-13277.5465 -13920.54  ] to CCS.\n",
+      "Value [-13277.5465 -13920.54  ] is dominated. Discarding.\n",
+      "Adding value: [-13290.0962 -13928.6392] to CCS.\n",
+      "Value [-13290.0962 -13928.6392] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "ename": "KeyboardInterrupt",
+     "evalue": "",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
+      "\u001b[1;32m<ipython-input-4-88fea07510ae>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mGPIAgent\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mGPIPDContinuousAction\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mper\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdyna\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexperiment_name\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'gpi-ls_2_obj_lowerstdev'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlearning_starts\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m \u001b[0mGPIAgent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m200000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mref_point\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtimesteps_per_iter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m10000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_freq\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36mtrain\u001b[1;34m(self, total_timesteps, eval_env, ref_point, known_pareto_front, num_eval_weights_for_front, num_eval_episodes_for_front, weight_selection_algo, timesteps_per_iter, eval_freq)\u001b[0m\n\u001b[0;32m    650\u001b[0m                     \u001b[0mn_value\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpolicy_evaluation_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0meval_env\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwcw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrep\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnum_eval_episodes_for_front\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    651\u001b[0m                     \u001b[0mlinear_support\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_solution\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_value\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwcw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 652\u001b[1;33m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    653\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    654\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    651\u001b[0m                     \u001b[0mlinear_support\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_solution\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mn_value\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwcw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    652\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 653\u001b[1;33m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    654\u001b[0m                 \u001b[1;31m# Evaluation\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    655\u001b[0m                 gpi_returns_test_tasks = [\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36mpolicy_evaluation_mo\u001b[1;34m(agent, env, w, rep)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mscalarized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mAvg\u001b[0m \u001b[0mvectorized\u001b[0m \u001b[0mdiscounted\u001b[0m \u001b[1;32mreturn\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    112\u001b[0m     \"\"\"\n\u001b[1;32m--> 113\u001b[1;33m     \u001b[0mevals\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0meval_mo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    114\u001b[0m     \u001b[0mavg_scalarized_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    115\u001b[0m     \u001b[0mavg_scalarized_discounted_return\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0meval\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mevals\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\common\\evaluation.py\u001b[0m in \u001b[0;36meval_mo\u001b[1;34m(agent, env, w, scalarization, render)\u001b[0m\n\u001b[0;32m     32\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mrender\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m             \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 34\u001b[1;33m         \u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mterminated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minfo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0magent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     35\u001b[0m         \u001b[0mdone\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mterminated\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mtruncated\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     36\u001b[0m         \u001b[0mvec_return\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mr\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\autograd\\grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     25\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 27\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     28\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mF\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36meval\u001b[1;34m(self, obs, w, torch_action)\u001b[0m\n\u001b[0;32m    462\u001b[0m             \u001b[0mobs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    463\u001b[0m             \u001b[0mactions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mactions_original\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 464\u001b[1;33m             stackedM = self.stacked_weight_support.repeat_interleave(len(self.weight_support), dim=0).view(\n\u001b[0m\u001b[0;32m    465\u001b[0m                 \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mweight_support\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreward_dim\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    466\u001b[0m             )\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\morl_baselines\\multi_policy\\gpi_pd\\gpi_pd_continuous_action.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, obs, action, w)\u001b[0m\n\u001b[0;32m     71\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maction\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     72\u001b[0m         \u001b[1;34m\"\"\"Forward pass of the Q-network.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 73\u001b[1;33m         \u001b[0mq_values\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnet\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mth\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maction\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mobs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     74\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mq_values\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     75\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\container.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    202\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    203\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 204\u001b[1;33m             \u001b[0minput\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    205\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    206\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[1;34m(self, *input, **kwargs)\u001b[0m\n\u001b[0;32m   1188\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[0;32m   1189\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[1;32m-> 1190\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1191\u001b[0m         \u001b[1;31m# Do not call functions when jit is used\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1192\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\modules\\dropout.py\u001b[0m in \u001b[0;36mforward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m     57\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     58\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minput\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 59\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtraining\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     60\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     61\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;32mc:\\Users\\liamm\\anaconda3\\lib\\site-packages\\torch\\nn\\functional.py\u001b[0m in \u001b[0;36mdropout\u001b[1;34m(input, p, training, inplace)\u001b[0m\n\u001b[0;32m   1250\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mp\u001b[0m \u001b[1;33m<\u001b[0m \u001b[1;36m0.0\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mp\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m1.0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1251\u001b[0m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"dropout probability has to be between 0 and 1, \"\u001b[0m \u001b[1;34m\"but got {}\"\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mp\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1252\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0m_VF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropout_\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mif\u001b[0m \u001b[0minplace\u001b[0m \u001b[1;32melse\u001b[0m \u001b[0m_VF\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minput\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mp\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mtraining\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1253\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1254\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
+      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
+     ]
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=False, nO=2, penalize=True, time_limit=100)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_lowerstdev', learning_starts=4000)\n",
+    "\n",
+    "GPIAgent.train(200000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=10000, eval_freq=1000, num_eval_episodes_for_front=5)"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Testing GPI-ls on other environemnts\n",
+    "\n",
+    "Verify that we are in fact using the correct method for a continuous state MORL problem by training on the MO-hopper environment"
    ]
   },
   {
diff --git a/Gpi/wandb/debug-cli.liamm.log b/Gpi/wandb/debug-cli.liamm.log
index e69de29..c34b6bc 100644
--- a/Gpi/wandb/debug-cli.liamm.log
+++ b/Gpi/wandb/debug-cli.liamm.log
@@ -0,0 +1,4 @@
+2023-05-08 12:05:53 ERROR dropped chunk 404 Client Error: Not Found for url: https://api.wandb.ai/files/vub-ai/MORL-Baselines/17gfm4v3/file_stream
+NoneType: None
+2023-05-08 12:06:29 ERROR dropped chunk 404 Client Error: Not Found for url: https://api.wandb.ai/files/vub-ai/MORL-Baselines/17gfm4v3/file_stream
+NoneType: None
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=1.tar b/Gpi/weights/GPI-PD gpi-ls iter=1.tar
index ce5765d..893ed64 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=1.tar and b/Gpi/weights/GPI-PD gpi-ls iter=1.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=10.tar b/Gpi/weights/GPI-PD gpi-ls iter=10.tar
index 934bf4a..7395192 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=10.tar and b/Gpi/weights/GPI-PD gpi-ls iter=10.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=11.tar b/Gpi/weights/GPI-PD gpi-ls iter=11.tar
index 7a1f03a..e892376 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=11.tar and b/Gpi/weights/GPI-PD gpi-ls iter=11.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=12.tar b/Gpi/weights/GPI-PD gpi-ls iter=12.tar
index e69e3fb..d1cb011 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=12.tar and b/Gpi/weights/GPI-PD gpi-ls iter=12.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=13.tar b/Gpi/weights/GPI-PD gpi-ls iter=13.tar
index 37e5d90..6ca5028 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=13.tar and b/Gpi/weights/GPI-PD gpi-ls iter=13.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=14.tar b/Gpi/weights/GPI-PD gpi-ls iter=14.tar
index 781c2a6..edaf0ac 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=14.tar and b/Gpi/weights/GPI-PD gpi-ls iter=14.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=15.tar b/Gpi/weights/GPI-PD gpi-ls iter=15.tar
index b06abdb..7b3fe29 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=15.tar and b/Gpi/weights/GPI-PD gpi-ls iter=15.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=16.tar b/Gpi/weights/GPI-PD gpi-ls iter=16.tar
index 9d4ace3..b579081 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=16.tar and b/Gpi/weights/GPI-PD gpi-ls iter=16.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=17.tar b/Gpi/weights/GPI-PD gpi-ls iter=17.tar
index cee071d..1f2b79b 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=17.tar and b/Gpi/weights/GPI-PD gpi-ls iter=17.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=18.tar b/Gpi/weights/GPI-PD gpi-ls iter=18.tar
index bfce3f0..c823748 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=18.tar and b/Gpi/weights/GPI-PD gpi-ls iter=18.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=19.tar b/Gpi/weights/GPI-PD gpi-ls iter=19.tar
index 909308c..d6f838d 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=19.tar and b/Gpi/weights/GPI-PD gpi-ls iter=19.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=2.tar b/Gpi/weights/GPI-PD gpi-ls iter=2.tar
index 94997df..23c7edb 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=2.tar and b/Gpi/weights/GPI-PD gpi-ls iter=2.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=20.tar b/Gpi/weights/GPI-PD gpi-ls iter=20.tar
index 80b63f4..828bd55 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=20.tar and b/Gpi/weights/GPI-PD gpi-ls iter=20.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=3.tar b/Gpi/weights/GPI-PD gpi-ls iter=3.tar
index d39174e..1fdb7ea 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=3.tar and b/Gpi/weights/GPI-PD gpi-ls iter=3.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=4.tar b/Gpi/weights/GPI-PD gpi-ls iter=4.tar
index 0b944b4..adc6401 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=4.tar and b/Gpi/weights/GPI-PD gpi-ls iter=4.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=5.tar b/Gpi/weights/GPI-PD gpi-ls iter=5.tar
index f97bd0e..c7862b1 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=5.tar and b/Gpi/weights/GPI-PD gpi-ls iter=5.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=6.tar b/Gpi/weights/GPI-PD gpi-ls iter=6.tar
index e0729d8..f48b0e2 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=6.tar and b/Gpi/weights/GPI-PD gpi-ls iter=6.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=7.tar b/Gpi/weights/GPI-PD gpi-ls iter=7.tar
index 1c8737a..97fed27 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=7.tar and b/Gpi/weights/GPI-PD gpi-ls iter=7.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=8.tar b/Gpi/weights/GPI-PD gpi-ls iter=8.tar
index 1716927..866b1d7 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=8.tar and b/Gpi/weights/GPI-PD gpi-ls iter=8.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=9.tar b/Gpi/weights/GPI-PD gpi-ls iter=9.tar
index bcdd6d8..a7dfbca 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=9.tar and b/Gpi/weights/GPI-PD gpi-ls iter=9.tar differ
