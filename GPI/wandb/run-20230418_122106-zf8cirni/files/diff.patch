diff --git a/Gpi/main.ipynb b/Gpi/main.ipynb
index b8191fe..0b49950 100644
--- a/Gpi/main.ipynb
+++ b/Gpi/main.ipynb
@@ -30,7 +30,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -115,7 +115,7 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "### Experiment with TD3 hyperparameters\n",
+    "### Experiment with TD3 hyperparameters: Attempt #1\n",
     "\n",
     "- net_arch = [500]\n",
     "\n",
@@ -458,6 +458,385 @@
     "When looking at the resulting solution set, the returns have improved slightly. We'll try to experiment more with the hidden layer configuration."
    ]
   },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "### Attempt #2\n",
+    "\n",
+    "- net_arch = [200]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
+      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
+       " $ pip install wandb --upgrade"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Tracking run with wandb version 0.14.0"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230417_202402-o000nipz</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200__None__1681755840</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz</a>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "CCS: [] CCS size: 0\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -79.212  -1043.5227] to CCS.\n",
+      "Adding value: [  -84.3196 -1079.4613] to CCS.\n",
+      "Value [  -84.3196 -1079.4613] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
+      "CCS: [array([  -79.212 , -1043.5227], dtype=float32)] CCS size: 1\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -74.5399 -1055.2523] to CCS.\n",
+      "Adding value: [  -87.4739 -1046.2877] to CCS.\n",
+      "Value [  -87.4739 -1046.2877] is dominated. Discarding.\n",
+      "Adding value: [  -70.9345 -1052.2025] to CCS.\n",
+      "removed value [  -74.5399 -1055.2523]\n",
+      "W_corner: [array([1., 0.]), array([0.5119, 0.4881]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -79.212 , -1043.5227], dtype=float32), array([  -70.9345, -1052.2025])] CCS size: 2\n",
+      "Next weight: [0.5119 0.4881]\n",
+      "Next weight vector: [0.5119 0.4881]\n",
+      "Adding value: [ -87.7017 -983.5114] to CCS.\n",
+      "removed value [  -79.212  -1043.5227]\n",
+      "Adding value: [  -92.5898 -1037.0446] to CCS.\n",
+      "Value [  -92.5898 -1037.0446] is dominated. Discarding.\n",
+      "Adding value: [  -86.9717 -1039.5384] to CCS.\n",
+      "Value [  -86.9717 -1039.5384] is dominated. Discarding.\n",
+      "Adding value: [ -79.9389 -963.4485] to CCS.\n",
+      "removed value [ -87.7017 -983.5114]\n",
+      "Adding value: [  -81.7442 -1050.8113] to CCS.\n",
+      "Value [  -81.7442 -1050.8113] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9079, 0.0921]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -70.9345, -1052.2025]), array([ -79.9389, -963.4485])] CCS size: 2\n",
+      "Next weight: [0.9079 0.0921]\n",
+      "Next weight vector: [0.9079 0.0921]\n",
+      "Adding value: [  -75.137  -1033.0543] to CCS.\n",
+      "Value [  -75.137  -1033.0543] is dominated. Discarding.\n",
+      "Adding value: [  -98.7073 -1075.1105] to CCS.\n",
+      "Value [  -98.7073 -1075.1105] is dominated. Discarding.\n",
+      "Adding value: [  -80.686  -1041.9122] to CCS.\n",
+      "Value [  -80.686  -1041.9122] is dominated. Discarding.\n",
+      "Adding value: [  -78.1123 -1019.2002] to CCS.\n",
+      "Value [  -78.1123 -1019.2002] is dominated. Discarding.\n",
+      "Adding value: [  -83.465  -1030.6082] to CCS.\n",
+      "Value [  -83.465  -1030.6082] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.9079, 0.0921]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([  -70.9345, -1052.2025]), array([ -79.9389, -963.4485])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -66.6847 -1112.1306] to CCS.\n",
+      "removed value [  -70.9345 -1052.2025]\n",
+      "Adding value: [  -87.373  -1042.1463] to CCS.\n",
+      "Value [  -87.373  -1042.1463] is dominated. Discarding.\n",
+      "Adding value: [  -84.9602 -1079.6352] to CCS.\n",
+      "Value [  -84.9602 -1079.6352] is dominated. Discarding.\n",
+      "Adding value: [  -67.8415 -1041.9637] to CCS.\n",
+      "Adding value: [  -87.1668 -1048.4431] to CCS.\n",
+      "Value [  -87.1668 -1048.4431] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.8665 0.1335]\n",
+      "Next weight vector: [0.8665 0.1335]\n",
+      "Adding value: [  -91.0526 -1047.3501] to CCS.\n",
+      "Value [  -91.0526 -1047.3501] is dominated. Discarding.\n",
+      "Adding value: [  -78.7576 -1068.1292] to CCS.\n",
+      "Value [  -78.7576 -1068.1292] is dominated. Discarding.\n",
+      "Adding value: [  -92.8791 -1080.896 ] to CCS.\n",
+      "Value [  -92.8791 -1080.896 ] is dominated. Discarding.\n",
+      "Adding value: [  -77.8769 -1054.3449] to CCS.\n",
+      "Value [  -77.8769 -1054.3449] is dominated. Discarding.\n",
+      "Adding value: [ -87.1033 -991.8694] to CCS.\n",
+      "Value [ -87.1033 -991.8694] is dominated. Discarding.\n",
+      "Adding value: [  -95.8276 -1033.2121] to CCS.\n",
+      "Value [  -95.8276 -1033.2121] is dominated. Discarding.\n",
+      "Adding value: [ -81.399  -982.5044] to CCS.\n",
+      "Value [ -81.399  -982.5044] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.8665 0.1335]\n",
+      "Next weight vector: [0.8665 0.1335]\n",
+      "Adding value: [  -92.1107 -1052.9766] to CCS.\n",
+      "Value [  -92.1107 -1052.9766] is dominated. Discarding.\n",
+      "Adding value: [  -68.6115 -1083.255 ] to CCS.\n",
+      "Value [  -68.6115 -1083.255 ] is dominated. Discarding.\n",
+      "Adding value: [  -74.004 -1082.044] to CCS.\n",
+      "Value [  -74.004 -1082.044] is dominated. Discarding.\n",
+      "Adding value: [  -87.3477 -1042.0662] to CCS.\n",
+      "Value [  -87.3477 -1042.0662] is dominated. Discarding.\n",
+      "Adding value: [  -67.9268 -1057.505 ] to CCS.\n",
+      "Value [  -67.9268 -1057.505 ] is dominated. Discarding.\n",
+      "Adding value: [  -71.9235 -1041.2159] to CCS.\n",
+      "Value [  -71.9235 -1041.2159] is dominated. Discarding.\n",
+      "Adding value: [  -89.6999 -1022.3869] to CCS.\n",
+      "Value [  -89.6999 -1022.3869] is dominated. Discarding.\n",
+      "W_corner: [array([0.9838, 0.0162]), array([1., 0.]), array([0., 1.]), array([0.8665, 0.1335])] W_corner size: 4\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -66.6847, -1112.1306]), array([  -67.8415, -1041.9637])] CCS size: 3\n",
+      "Next weight: [0.9838 0.0162]\n",
+      "Next weight vector: [0.9838 0.0162]\n",
+      "Adding value: [  -86.7426 -1006.0194] to CCS.\n",
+      "Value [  -86.7426 -1006.0194] is dominated. Discarding.\n",
+      "Adding value: [  -87.417  -1048.3068] to CCS.\n",
+      "Value [  -87.417  -1048.3068] is dominated. Discarding.\n",
+      "Adding value: [  -89.7156 -1078.5979] to CCS.\n",
+      "Value [  -89.7156 -1078.5979] is dominated. Discarding.\n",
+      "Adding value: [  -77.589  -1039.5263] to CCS.\n",
+      "Value [  -77.589  -1039.5263] is dominated. Discarding.\n",
+      "Adding value: [  -89.7999 -1067.4481] to CCS.\n",
+      "Value [  -89.7999 -1067.4481] is dominated. Discarding.\n",
+      "Adding value: [  -87.1601 -1007.624 ] to CCS.\n",
+      "Value [  -87.1601 -1007.624 ] is dominated. Discarding.\n",
+      "Adding value: [  -65.5773 -1035.9919] to CCS.\n",
+      "removed value [  -67.8415 -1041.9637]\n",
+      "removed value [  -66.6847 -1112.1306]\n",
+      "W_corner: [array([1., 0.]), array([0.8347, 0.1653]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -65.5773, -1035.9919])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -88.0143 -1045.4799] to CCS.\n",
+      "Value [  -88.0143 -1045.4799] is dominated. Discarding.\n",
+      "Adding value: [  -84.6787 -1048.6734] to CCS.\n",
+      "Value [  -84.6787 -1048.6734] is dominated. Discarding.\n",
+      "Adding value: [  -75.1096 -1038.4683] to CCS.\n",
+      "Value [  -75.1096 -1038.4683] is dominated. Discarding.\n",
+      "Adding value: [  -86.5482 -1063.8276] to CCS.\n",
+      "Value [  -86.5482 -1063.8276] is dominated. Discarding.\n",
+      "Adding value: [  -83.8284 -1031.6924] to CCS.\n",
+      "Value [  -83.8284 -1031.6924] is dominated. Discarding.\n",
+      "W_corner: [array([1., 0.]), array([0.8347, 0.1653]), array([0., 1.])] W_corner size: 3\n",
+      "CCS: [array([ -79.9389, -963.4485]), array([  -65.5773, -1035.9919])] CCS size: 2\n",
+      "Next weight: [1. 0.]\n",
+      "Next weight vector: [1. 0.]\n",
+      "Adding value: [  -92.7594 -1067.125 ] to CCS.\n",
+      "Value [  -92.7594 -1067.125 ] is dominated. Discarding.\n",
+      "Adding value: [  -94.2472 -1060.962 ] to CCS.\n",
+      "Value [  -94.2472 -1060.962 ] is dominated. Discarding.\n",
+      "Adding value: [  -89.5745 -1049.2308] to CCS.\n",
+      "Value [  -89.5745 -1049.2308] is dominated. Discarding.\n",
+      "Adding value: [  -74.8028 -1080.8246] to CCS.\n",
+      "Value [  -74.8028 -1080.8246] is dominated. Discarding.\n",
+      "Adding value: [  -87.1511 -1066.1293] to CCS.\n",
+      "Value [  -87.1511 -1066.1293] is dominated. Discarding.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
+       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
+       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
+       "    </style>\n",
+       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▃▄█▄▃▁▂▂▆▇</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-567.36678</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200__None__1681755840</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/o000nipz</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find logs at: <code>.\\wandb\\run-20230417_202402-o000nipz\\logs</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers200', policy_noise=0.002, noise_clip=0.005, net_arch=[200])\n",
+    "\n",
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650) #random ref_point, hv is not used in the algorithm so this does not matter for training"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "image/png": "",
+      "text/plain": [
+       "<Figure size 640x480 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "columns = [\"objective_1\", \"objective_2\"]\n",
+    "\n",
+    "df = pd.read_csv(\"2obj_norm_lessPNoise_Hlayer200.csv\", usecols=columns)\n",
+    "\n",
+    "plt.plot(df.objective_1, df.objective_2, 'o')\n",
+    "plt.xlabel('Cost due to excess water level wrt flooding threshold upstream')\n",
+    "plt.ylabel('Deficit in water supply wrt demand')\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The results are no better than in previous experiments, but we can clearly see that there is a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases.\n",
+    "\n",
+    "We can conclude that using only a single hidden layer suffices for now. Next, we can try to alter batch size/buffer size.\n",
+    "\n",
+    "## Attempt #3\n",
+    "First, try to increase the buffer size so that the network does not overfit on recent experiences.\n",
+    "\n",
+    "- net_arch = [500]\n",
+    "- buffer_size = 3650\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
+    "\n",
+    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650', policy_noise=0.002, noise_clip=0.005, net_arch=[500], buffer_size=3650)\n",
+    "\n",
+    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650) #random ref_point, hv is not used in the algorithm so this does not matter for training"
+   ]
+  },
   {
    "attachments": {},
    "cell_type": "markdown",
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=1.tar b/Gpi/weights/GPI-PD gpi-ls iter=1.tar
index 46b1afb..2c549f3 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=1.tar and b/Gpi/weights/GPI-PD gpi-ls iter=1.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=10.tar b/Gpi/weights/GPI-PD gpi-ls iter=10.tar
index ec935f3..6f3e32a 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=10.tar and b/Gpi/weights/GPI-PD gpi-ls iter=10.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=2.tar b/Gpi/weights/GPI-PD gpi-ls iter=2.tar
index 41cea62..41f485f 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=2.tar and b/Gpi/weights/GPI-PD gpi-ls iter=2.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=3.tar b/Gpi/weights/GPI-PD gpi-ls iter=3.tar
index 431ef06..16e58ca 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=3.tar and b/Gpi/weights/GPI-PD gpi-ls iter=3.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=4.tar b/Gpi/weights/GPI-PD gpi-ls iter=4.tar
index ac2dab8..c6415ee 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=4.tar and b/Gpi/weights/GPI-PD gpi-ls iter=4.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=5.tar b/Gpi/weights/GPI-PD gpi-ls iter=5.tar
index d687fc1..c47b335 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=5.tar and b/Gpi/weights/GPI-PD gpi-ls iter=5.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=6.tar b/Gpi/weights/GPI-PD gpi-ls iter=6.tar
index 708b11d..96a4eed 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=6.tar and b/Gpi/weights/GPI-PD gpi-ls iter=6.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=7.tar b/Gpi/weights/GPI-PD gpi-ls iter=7.tar
index 06149ef..528988c 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=7.tar and b/Gpi/weights/GPI-PD gpi-ls iter=7.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=8.tar b/Gpi/weights/GPI-PD gpi-ls iter=8.tar
index af5dc83..de7d639 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=8.tar and b/Gpi/weights/GPI-PD gpi-ls iter=8.tar differ
diff --git a/Gpi/weights/GPI-PD gpi-ls iter=9.tar b/Gpi/weights/GPI-PD gpi-ls iter=9.tar
index 0418094..341e76b 100644
Binary files a/Gpi/weights/GPI-PD gpi-ls iter=9.tar and b/Gpi/weights/GPI-PD gpi-ls iter=9.tar differ
