diff --git a/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv b/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv
deleted file mode 100644
index b977d98..0000000
--- a/Gpi/2obj_norm_lessPNoise_Hlayer200buffer3650.csv
+++ /dev/null
@@ -1,101 +0,0 @@
-"objective_1","objective_2"
-"-91.53183007217012","-1022.8256506800651"
-"-78.14203669836861","-1079.0625104665291"
-"-74.99723661369644","-1049.0283968668896"
-"-85.00558884590865","-1072.5191177143715"
-"-66.2141448321864","-1057.5463390932769"
-"-81.62407328251501","-1002.5212741631083"
-"-79.44533374300227","-1064.5143912418134"
-"-79.83635042691603","-1039.4494809277342"
-"-76.28534322760534","-1065.459482320503"
-"-78.88567748800851","-1051.7242583856219"
-"-71.82255094414577","-1103.647342278203"
-"-79.67586851716041","-1046.2717485904345"
-"-74.87652528388426","-1051.3167366615612"
-"-73.19352013177703","-1032.8102254761384"
-"-77.57616099696607","-1020.4398037040839"
-"-86.46370708914473","-1044.701641778997"
-"-101.88883917918429","-1016.9287435288076"
-"-90.10309673263255","-1042.0823319560848"
-"-72.34625697184819","-1034.1459662067239"
-"-83.88403454828077","-1040.6301453631372"
-"-83.05747746049892","-1058.7115071860142"
-"-78.38347562580603","-1035.9806638120208"
-"-87.4690231606597","-1032.7514905171934"
-"-75.8715149776428","-1065.6731638046476"
-"-85.29073780232575","-1001.0196151528274"
-"-90.33892673660303","-1040.491965832282"
-"-85.09421532871201","-1044.2861699821892"
-"-92.58384429900907","-1033.0266553443391"
-"-77.05096556837671","-1038.2645520546473"
-"-96.75805392521434","-1032.6535591783002"
-"-84.15438853034284","-1047.301008518017"
-"-78.17892651581205","-1087.3532411946683"
-"-79.92654804161285","-1083.2035126082133"
-"-74.45834255921655","-1052.9716980567669"
-"-90.61150308246724","-1051.4039334182628"
-"-86.86262932035606","-1019.8799248492811"
-"-93.51119706424069","-1007.5876250263536"
-"-76.31560729660559","-1118.6255158333456"
-"-88.33768567945808","-1063.965476927394"
-"-85.4251508815214","-1038.569608161226"
-"-83.2859241082333","-1061.5740060664714"
-"-82.14688430611568","-1095.0912599908654"
-"-71.46011308846064","-1076.6343653987074"
-"-86.42477027187124","-1038.8063949177188"
-"-82.55838660364971","-1045.7799231674405"
-"-86.89799576252699","-1068.49564575057"
-"-75.42380763373804","-1026.7328610267955"
-"-88.582664007321","-1040.5024155435617"
-"-89.94019629471003","-1024.2490765049472"
-"-76.02846596031449","-1020.3580706219188"
-"-75.32445026878267","-1062.0378788017667"
-"-73.74743387565249","-1046.516115244478"
-"-83.63155948025087","-1027.3204001104073"
-"-86.05296205226333","-1075.3762032703496"
-"-71.2909983347694","-1053.7322991570459"
-"-92.83743247255661","-1006.2255636485527"
-"-81.29852420622483","-1055.6236468834336"
-"-87.37987329747993","-1043.2028257664758"
-"-82.21699301255867","-1040.1190810038709"
-"-71.00971493606922","-1087.348992808163"
-"-98.45940790503519","-1028.8287179885433"
-"-91.56131216515787","-1001.589259513421"
-"-72.55577458748594","-1079.489494658867"
-"-76.06018349155784","-1067.3429756452213"
-"-75.44200412477366","-1044.090343687078"
-"-76.48364048982039","-1063.2016782157123"
-"-73.97838431347627","-1033.0927119034343"
-"-82.37117097729352","-1085.2390213828069"
-"-69.2863412049599","-1089.0756568949205"
-"-85.22632192494348","-1056.8919947802788"
-"-77.21806081857066","-1103.683186232904"
-"-84.36187441371149","-985.7269350973714"
-"-73.89989965860732","-1101.4776355137467"
-"-94.3241130166105","-994.7338124457281"
-"-71.79193605883047","-1064.6261081409698"
-"-68.91599002913571","-1093.0282023234292"
-"-79.15210377918557","-1013.387120728381"
-"-75.38006720975973","-1037.6150288307108"
-"-85.7210139027331","-1063.6825081494753"
-"-97.22303072623909","-1035.9331666750052"
-"-76.00172006906942","-1060.7065991393872"
-"-80.0657581034371","-1047.5291201985813"
-"-79.54214356876909","-1050.4107896117027"
-"-83.83055768767372","-1074.6590507650283"
-"-82.74088046588004","-1025.9811924742535"
-"-83.70773554844781","-1061.8992664878722"
-"-91.67636479586363","-1045.2713631242514"
-"-75.78754267459735","-1062.3580996553646"
-"-87.71408887887374","-1058.676021124434"
-"-85.10292972642928","-1062.5798477028613"
-"-88.39362296483014","-1052.7670409579296"
-"-80.83529201577184","-1101.2550276985858"
-"-91.24902236172929","-1009.4609033303335"
-"-74.24542560492701","-1032.9046872914303"
-"-94.64312865007669","-1009.7128772354685"
-"-80.75568267405033","-1011.159529741644"
-"-72.93039533859118","-1076.3741638501174"
-"-66.7733762821299","-1075.3790101447375"
-"-94.6002845563111","-1016.2957660613581"
-"-69.3648760257056","-1056.3059688504552"
\ No newline at end of file
diff --git a/Gpi/main.ipynb b/Gpi/main.ipynb
index 6b2fec5..2d33960 100644
--- a/Gpi/main.ipynb
+++ b/Gpi/main.ipynb
@@ -13,7 +13,8 @@
     "Algorithms:\n",
     "- GPI-ls + TD3\n",
     "- PCN\n",
-    "- ?"
+    "\n",
+    "The returns used for the plotted pareto fronts are the discounted returns averaged over 5 episodes (default), unless specified otherwise."
    ]
   },
   {
@@ -23,10 +24,9 @@
    "source": [
     "# TODO...\n",
     "\n",
-    "- Tune hyperparameters/environment parameters to get improved results using GPI-ls\n",
+    "- Tune hyperparameters/environment to get improved results using GPI-ls\n",
     "- Decide between normalized actions or true actions\n",
-    "- Get a reference for comparing with GPI-ls results: PCN, original paper (MOFQI), [original experiment](https://github.com/sparisi/mips/tree/loopless/MDPs/Dam)\n",
-    "- Consider using [MOFQI](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) instead of TD3 in combination with gpi-ls.\n"
+    "- Get a reference for comparing with GPI-ls results: PCN, [original experiment](https://github.com/sparisi/mips/tree/loopless/MDPs/Dam)"
    ]
   },
   {
@@ -814,371 +814,11 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "The results are no better than in previous experiments, but we can clearly see that there is a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases.\n",
-    "\n",
-    "We can conclude that using only a single hidden layer suffices for now. Next, we can try to alter [batch size](https://openreview.net/pdf?id=B1Yy1BxCZ) or [buffer size](https://ai.stackexchange.com/questions/11640/how-large-should-the-replay-buffer-be).\n",
+    "The results are no better than in previous experiments, but there might be a case of [catastrophic forgetting](https://en.wikipedia.org/wiki/Catastrophic_interference): The mean utility increases up to a certain timestep and then decreases. Another explanation might be that there is insufficient exploration due to lower policy noise and learning_starts = 100 timesteps. Investigate...\n",
     "\n",
-    "## Attempt #3\n",
-    "First, try to increase the buffer size so that the network does not overfit on recent experiences.\n",
+    "Next, we could try to alter [batch size](https://openreview.net/pdf?id=B1Yy1BxCZ) or [buffer size](https://ai.stackexchange.com/questions/11640/how-large-should-the-replay-buffer-be). And take a look at the randomness of the environment.\n",
     "\n",
-    "- net_arch = [500]\n",
-    "- buffer_size = 3650\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
-      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "wandb version 0.14.2 is available!  To upgrade, please run:\n",
-       " $ pip install wandb --upgrade"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Tracking run with wandb version 0.14.0"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230418_122106-zf8cirni</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CCS: [] CCS size: 0\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -91.4887 -1043.3635] to CCS.\n",
-      "Adding value: [  -82.9375 -1083.8959] to CCS.\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "W_corner: [array([1., 0.]), array([0.8258, 0.1742]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -91.4887, -1043.3635], dtype=float32), array([  -82.9375, -1083.8959], dtype=float32)] CCS size: 2\n",
-      "Next weight: [0.8258 0.1742]\n",
-      "Next weight vector: [0.8258 0.1742]\n",
-      "Adding value: [  -83.1618 -1087.2312] to CCS.\n",
-      "Value [  -83.1618 -1087.2312] is dominated. Discarding.\n",
-      "Adding value: [  -85.7546 -1087.4425] to CCS.\n",
-      "Value [  -85.7546 -1087.4425] is dominated. Discarding.\n",
-      "Adding value: [  -84.1725 -1057.924 ] to CCS.\n",
-      "Value [  -84.1725 -1057.924 ] is dominated. Discarding.\n",
-      "Adding value: [  -78.6874 -1023.8228] to CCS.\n",
-      "removed value [  -82.9375 -1083.8959]\n",
-      "removed value [  -91.4887 -1043.3635]\n",
-      "Adding value: [  -72.5249 -1098.1948] to CCS.\n",
-      "W_corner: [array([1., 0.]), array([0.9235, 0.0765]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -78.6874, -1023.8228]), array([  -72.5249, -1098.1948])] CCS size: 2\n",
-      "Next weight: [0.9235 0.0765]\n",
-      "Next weight vector: [0.9235 0.0765]\n",
-      "Adding value: [  -70.7668 -1082.4304] to CCS.\n",
-      "removed value [  -72.5249 -1098.1948]\n",
-      "Adding value: [  -87.5697 -1072.8665] to CCS.\n",
-      "Value [  -87.5697 -1072.8665] is dominated. Discarding.\n",
-      "Adding value: [  -95.9061 -1021.7206] to CCS.\n",
-      "Adding value: [  -98.2004 -1047.9913] to CCS.\n",
-      "Value [  -98.2004 -1047.9913] is dominated. Discarding.\n",
-      "Adding value: [  -72.5381 -1061.1942] to CCS.\n",
-      "Value [  -72.5381 -1061.1942] is dominated. Discarding.\n",
-      "W_corner: [array([0.8809, 0.1191]), array([1., 0.]), array([0., 1.]), array([0.1088, 0.8912])] W_corner size: 4\n",
-      "CCS: [array([  -78.6874, -1023.8228]), array([  -70.7668, -1082.4304]), array([  -95.9061, -1021.7206])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [  -61.2935 -1078.9337] to CCS.\n",
-      "removed value [  -70.7668 -1082.4304]\n",
-      "removed value [  -78.6874 -1023.8228]\n",
-      "Adding value: [  -75.069  -1069.3299] to CCS.\n",
-      "Value [  -75.069  -1069.3299] is dominated. Discarding.\n",
-      "Adding value: [  -71.2487 -1049.4456] to CCS.\n",
-      "Value [  -71.2487 -1049.4456] is dominated. Discarding.\n",
-      "Adding value: [  -76.3961 -1095.309 ] to CCS.\n",
-      "Value [  -76.3961 -1095.309 ] is dominated. Discarding.\n",
-      "Adding value: [  -71.3193 -1059.7824] to CCS.\n",
-      "Value [  -71.3193 -1059.7824] is dominated. Discarding.\n",
-      "Adding value: [  -74.6974 -1062.8073] to CCS.\n",
-      "Value [  -74.6974 -1062.8073] is dominated. Discarding.\n",
-      "Adding value: [  -95.0864 -1041.5788] to CCS.\n",
-      "Value [  -95.0864 -1041.5788] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.6231, 0.3769]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([  -95.9061, -1021.7206]), array([  -61.2935, -1078.9337])] CCS size: 2\n",
-      "Next weight: [0.6231 0.3769]\n",
-      "Next weight vector: [0.6231 0.3769]\n",
-      "Adding value: [  -80.2084 -1072.983 ] to CCS.\n",
-      "Value [  -80.2084 -1072.983 ] is dominated. Discarding.\n",
-      "Adding value: [  -90.8638 -1051.6204] to CCS.\n",
-      "Value [  -90.8638 -1051.6204] is dominated. Discarding.\n",
-      "Adding value: [  -90.5433 -1018.7755] to CCS.\n",
-      "removed value [  -95.9061 -1021.7206]\n",
-      "Adding value: [  -72.4396 -1026.0345] to CCS.\n",
-      "Adding value: [  -79.4654 -1027.9323] to CCS.\n",
-      "Value [  -79.4654 -1027.9323] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.2862, 0.7138])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -90.5433, -1018.7755]), array([  -72.4396, -1026.0345])] CCS size: 3\n",
-      "Next weight: [0.826 0.174]\n",
-      "Next weight vector: [0.826 0.174]\n",
-      "Adding value: [  -77.2351 -1051.186 ] to CCS.\n",
-      "Value [  -77.2351 -1051.186 ] is dominated. Discarding.\n",
-      "Adding value: [  -84.6875 -1052.685 ] to CCS.\n",
-      "Value [  -84.6875 -1052.685 ] is dominated. Discarding.\n",
-      "Adding value: [  -73.0153 -1060.5025] to CCS.\n",
-      "Value [  -73.0153 -1060.5025] is dominated. Discarding.\n",
-      "Adding value: [  -82.2024 -1055.3418] to CCS.\n",
-      "Value [  -82.2024 -1055.3418] is dominated. Discarding.\n",
-      "Adding value: [  -79.0316 -1071.6413] to CCS.\n",
-      "Value [  -79.0316 -1071.6413] is dominated. Discarding.\n",
-      "Adding value: [  -84.0287 -1045.6269] to CCS.\n",
-      "Value [  -84.0287 -1045.6269] is dominated. Discarding.\n",
-      "Adding value: [  -88.8499 -1012.6056] to CCS.\n",
-      "removed value [  -90.5433 -1018.7755]\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [  -78.8052 -1060.4226] to CCS.\n",
-      "Value [  -78.8052 -1060.4226] is dominated. Discarding.\n",
-      "Adding value: [  -73.1717 -1063.9648] to CCS.\n",
-      "Value [  -73.1717 -1063.9648] is dominated. Discarding.\n",
-      "Adding value: [  -84.5917 -1061.2625] to CCS.\n",
-      "Value [  -84.5917 -1061.2625] is dominated. Discarding.\n",
-      "Adding value: [  -76.4639 -1066.2845] to CCS.\n",
-      "Value [  -76.4639 -1066.2845] is dominated. Discarding.\n",
-      "Adding value: [ -103.2944 -1043.9017] to CCS.\n",
-      "Value [ -103.2944 -1043.9017] is dominated. Discarding.\n",
-      "Adding value: [  -66.4684 -1074.1776] to CCS.\n",
-      "Value [  -66.4684 -1074.1776] is dominated. Discarding.\n",
-      "Adding value: [  -85.4805 -1073.3403] to CCS.\n",
-      "Value [  -85.4805 -1073.3403] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [0.45 0.55]\n",
-      "Next weight vector: [0.45 0.55]\n",
-      "Adding value: [  -81.1672 -1044.4494] to CCS.\n",
-      "Value [  -81.1672 -1044.4494] is dominated. Discarding.\n",
-      "Adding value: [  -81.9442 -1070.6108] to CCS.\n",
-      "Value [  -81.9442 -1070.6108] is dominated. Discarding.\n",
-      "Adding value: [  -96.5051 -1045.6222] to CCS.\n",
-      "Value [  -96.5051 -1045.6222] is dominated. Discarding.\n",
-      "Adding value: [  -83.2376 -1088.5272] to CCS.\n",
-      "Value [  -83.2376 -1088.5272] is dominated. Discarding.\n",
-      "Adding value: [  -80.0558 -1077.7388] to CCS.\n",
-      "Value [  -80.0558 -1077.7388] is dominated. Discarding.\n",
-      "Adding value: [  -70.7796 -1076.772 ] to CCS.\n",
-      "Value [  -70.7796 -1076.772 ] is dominated. Discarding.\n",
-      "Adding value: [  -75.5809 -1040.8647] to CCS.\n",
-      "Value [  -75.5809 -1040.8647] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -74.6747 -1038.1342] to CCS.\n",
-      "Value [  -74.6747 -1038.1342] is dominated. Discarding.\n",
-      "Adding value: [  -87.3841 -1023.9272] to CCS.\n",
-      "Value [  -87.3841 -1023.9272] is dominated. Discarding.\n",
-      "Adding value: [  -82.8854 -1079.9265] to CCS.\n",
-      "Value [  -82.8854 -1079.9265] is dominated. Discarding.\n",
-      "Adding value: [  -78.1681 -1077.8876] to CCS.\n",
-      "Value [  -78.1681 -1077.8876] is dominated. Discarding.\n",
-      "Adding value: [  -95.8899 -1021.4416] to CCS.\n",
-      "Value [  -95.8899 -1021.4416] is dominated. Discarding.\n",
-      "Adding value: [  -88.3077 -1037.5199] to CCS.\n",
-      "Value [  -88.3077 -1037.5199] is dominated. Discarding.\n",
-      "Adding value: [  -82.4825 -1019.1509] to CCS.\n",
-      "Value [  -82.4825 -1019.1509] is dominated. Discarding.\n",
-      "W_corner: [array([0.826, 0.174]), array([1., 0.]), array([0., 1.]), array([0.45, 0.55])] W_corner size: 4\n",
-      "CCS: [array([  -61.2935, -1078.9337]), array([  -72.4396, -1026.0345]), array([  -88.8499, -1012.6056])] CCS size: 3\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [  -80.0987 -1004.3626] to CCS.\n",
-      "removed value [  -88.8499 -1012.6056]\n",
-      "Adding value: [  -64.9331 -1075.9121] to CCS.\n",
-      "Value [  -64.9331 -1075.9121] is dominated. Discarding.\n",
-      "Adding value: [  -78.6876 -1025.3916] to CCS.\n",
-      "Value [  -78.6876 -1025.3916] is dominated. Discarding.\n",
-      "Adding value: [  -88.8268 -1030.7416] to CCS.\n",
-      "Value [  -88.8268 -1030.7416] is dominated. Discarding.\n",
-      "Adding value: [  -71.1392 -1029.3756] to CCS.\n",
-      "removed value [  -72.4396 -1026.0345]\n",
-      "Adding value: [  -74.8615 -1118.2019] to CCS.\n",
-      "Value [  -74.8615 -1118.2019] is dominated. Discarding.\n",
-      "Adding value: [  -88.6611 -1072.6236] to CCS.\n",
-      "Value [  -88.6611 -1072.6236] is dominated. Discarding.\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "<style>\n",
-       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n",
-       "    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n",
-       "    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n",
-       "    </style>\n",
-       "<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>▅▇▆▁▆█▄▆▆▇</td></tr><tr><td>iteration</td><td>▁▂▃▃▄▅▆▆▇█</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>eval/Mean Utility - GPI</td><td>-567.61581</td></tr><tr><td>iteration</td><td>10</td></tr></table><br/></div></div>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run <strong style=\"color:#cdcd00\">water-reservoir-v0__gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650__None__1681813262</strong> at: <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/zf8cirni</a><br/>Synced 7 W&B file(s), 10 media file(s), 10 artifact file(s) and 1 other file(s)"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Find logs at: <code>.\\wandb\\run-20230418_122106-zf8cirni\\logs</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "env = mo_gym.make('water-reservoir-v0', normalized_action=True, nO=2, penalize=True, time_limit=365)\n",
-    "\n",
-    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_2_obj_NormAction_lessPolicyNoise_lessHiddenLayers500_bufferSize3650', policy_noise=0.002, noise_clip=0.005, net_arch=[500], buffer_size=3650)\n",
-    "\n",
-    "GPIAgent.train(365000, env, ref_point=np.array([0,0], dtype=np.float32), timesteps_per_iter=36500, eval_freq=3650)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "<Figure size 640x480 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "plot_pf('2obj_norm_lessPNoise_Hlayer200buffer3650.csv')"
-   ]
-  },
-  {
-   "attachments": {},
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "The resulting CCS is very similar to the previous."
+    "The hidden layer configuration does not impact learning significantly, so the default setup suffices."
    ]
   },
   {
@@ -1188,11 +828,13 @@
    "source": [
     "## Comparison with original paper\n",
     "\n",
-    "In [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) an experiment on the same simulated dam environment was conducted. Their results are a lot better, but the environment was only simulated for 100 timesteps/episode instead of the 365 used here.\n",
+    "In [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective) an experiment on the same simulated dam environment was conducted. Their results are a lot better, but the environment was only simulated for 100 timesteps/episode instead of the 365 used here. \n",
+    "\n",
+    "Also note that the returns used in the paper correspond to the average immediate rewards under each policy (instead of the discounted returns used here).\n",
     "\n",
     "We now conduct an experiment to test the randomness of the environment and see if this influences the mean utility. In order to test this, evaluate the policy for significantly more episodes (50) \n",
     "\n",
-    "In order to reduce training time, set time_limit = 100"
+    "In order to reduce training time, set time_limit = 100 (default, as in paper)"
    ]
   },
   {
@@ -1578,7 +1220,7 @@
    "source": [
     "## Try using non-normalized actions\n",
     "\n",
-    "manually place upper bound on the action space:\n",
+    "Manually place upper bound on the action space:\n",
     "- Upper bound = 250.0\n",
     "\n",
     "Also increase learning_starts to explore the environment a little more initially and boost learning."
@@ -2194,7 +1836,7 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "Results are slightly worse than when using normalized actions. When compared to the experiments with normalised actions, it is clear that the returns of the water demand objective are higher than before.\n",
+    "Results are slightly worse than when using normalized actions. BUT, when compared to the experiments with normalised actions, it is noticable that the returns of the water demand objective (y-axis) are higher than before.\n",
     "\n",
     "## TODO:\n",
     "\n",
@@ -2203,7 +1845,13 @@
     "- noise_clip value\n",
     "- decide on noise decay or not\n",
     "\n",
-    "Increase learning_starts even more because the initial exploration seems valuable."
+    "Increase learning_starts even more because the initial exploration seems valuable.\n",
+    "\n",
+    "Make some changes to the environment:\n",
+    "- Reduce randomness to test whether the algorithm has implementation issues or the environment is too random\n",
+    "\n",
+    "Change algorithm logging for fair comparison with [this paper](https://iwaponline.com/jh/article/15/2/258/3425/Tree-based-fitted-Q-iteration-for-multi-objective):\n",
+    "- Log the undiscounted returns instead of discounted"
    ]
   },
   {
@@ -2211,255 +1859,26 @@
    "cell_type": "markdown",
    "metadata": {},
    "source": [
-    "## Testing GPI-ls on other environemnts\n",
+    "## Increase initial exploration (normalised actions)\n",
     "\n",
-    "Verify that we are in fact using the correct method for a continuous state MORL problem by training on the MO-hopper environment"
+    "Run the same experiment again but now using normalised actions to see the impact of initial exploration"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "c:\\Users\\liamm\\anaconda3\\lib\\site-packages\\gymnasium\\spaces\\box.py:129: UserWarning: \u001b[33mWARN: Box bound precision lowered by casting to float32\u001b[0m\n",
-      "  gym.logger.warn(f\"Box bound precision lowered by casting to {self.dtype}\")\n",
-      "Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n",
-      "wandb: Currently logged in as: liam-mertens02 (vub-ai). Use `wandb login --relogin` to force relogin\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "wandb version 0.15.0 is available!  To upgrade, please run:\n",
-       " $ pip install wandb --upgrade"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Tracking run with wandb version 0.14.0"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Run data is saved locally in <code>c:\\Users\\liamm\\water-resource-management\\GPI\\wandb\\run-20230424_130040-dgf8cm1m</code>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "Syncing run <strong><a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">mo-mountaincarcontinuous-v0__gpi-ls_cart__None__1682334036</a></strong> to <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View project at <a href='https://wandb.ai/vub-ai/MORL-Baselines' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       " View run at <a href='https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m' target=\"_blank\">https://wandb.ai/vub-ai/MORL-Baselines/runs/dgf8cm1m</a>"
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Found log directory outside of given root_logdir, dropping given root_logdir for event file in /tmp/gpi-ls_cart\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CCS: [] CCS size: 0\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -3.8620e-02] to CCS.\n",
-      "Adding value: [-99.9957 -58.0822] to CCS.\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "wandb: WARNING Step cannot be set when using syncing with tensorboard. Please log your step values as a metric such as 'global_step'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9957, -58.0822], dtype=float32)] CCS size: 2\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -5.1989e-02] to CCS.\n",
-      "removed value [-99.9957 -58.0822]\n",
-      "Adding value: [-99.9957 -62.562 ] to CCS.\n",
-      "removed value [-9.9996e+01 -5.1989e-02]\n",
-      "Adding value: [-9.9996e+01 -5.1786e-02] to CCS.\n",
-      "removed value [-99.9957 -62.562 ]\n",
-      "Adding value: [-99.9956 -63.2635] to CCS.\n",
-      "removed value [-9.9996e+01 -5.1786e-02]\n",
-      "W_corner: [array([1., 0.]), array([1.0000e+00, 1.5817e-06]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956, -63.2635])] CCS size: 2\n",
-      "Next weight: [1.0000e+00 1.5817e-06]\n",
-      "Next weight vector: [1.0000e+00 1.5817e-06]\n",
-      "Adding value: [-99.9957  -0.2137] to CCS.\n",
-      "Value [-99.9957  -0.2137] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -73.2671] to CCS.\n",
-      "removed value [-99.9956 -63.2635]\n",
-      "Adding value: [-99.9956 -71.7984] to CCS.\n",
-      "removed value [-99.9956 -73.2671]\n",
-      "Adding value: [-99.9956  -0.3793] to CCS.\n",
-      "removed value [-99.9956 -71.7984]\n",
-      "Adding value: [-99.9956 -72.5853] to CCS.\n",
-      "W_corner: [array([1., 0.]), array([9.9971e-01, 2.9343e-04]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -3.8620e-02], dtype=float32), array([-99.9956,  -0.3793]), array([-99.9956, -72.5853])] CCS size: 3\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -3.4456e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -3.8620e-02]\n",
-      "Adding value: [-9.9996e+01 -3.4333e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -3.4456e-02]\n",
-      "removed value [-99.9956 -72.5853]\n",
-      "removed value [-99.9956  -0.3793]\n",
-      "Adding value: [-99.9956 -72.6202] to CCS.\n",
-      "Adding value: [-99.9956 -70.2426] to CCS.\n",
-      "removed value [-99.9956 -72.6202]\n",
-      "Adding value: [-99.9956 -72.4862] to CCS.\n",
-      "removed value [-99.9956 -70.2426]\n",
-      "Adding value: [-9.9996e+01 -7.4841e-02] to CCS.\n",
-      "removed value [-99.9956 -72.4862]\n",
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -3.4333e-02]), array([-9.9996e+01, -7.4841e-02])] CCS size: 2\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-99.9956  -0.1212] to CCS.\n",
-      "removed value [-9.9996e+01 -7.4841e-02]\n",
-      "Adding value: [-9.9996e+01 -1.2951e-03] to CCS.\n",
-      "removed value [-99.9956  -0.1212]\n",
-      "removed value [-9.9996e+01 -3.4333e-02]\n",
-      "Adding value: [-99.9956 -55.7682] to CCS.\n",
-      "Adding value: [-9.9996e+01 -1.3869e-03] to CCS.\n",
-      "removed value [-99.9956 -55.7682]\n",
-      "W_corner: [array([0., 1.]), array([1., 0.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -1.2951e-03]), array([-9.9996e+01, -1.3869e-03])] CCS size: 2\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -1.5441e-03] to CCS.\n",
-      "removed value [-9.9996e+01 -1.3869e-03]\n",
-      "Adding value: [-9.9996e+01 -3.4932e-02] to CCS.\n",
-      "removed value [-9.9996e+01 -1.5441e-03]\n",
-      "Adding value: [-99.9956 -51.6448] to CCS.\n",
-      "removed value [-9.9996e+01 -3.4932e-02]\n",
-      "Adding value: [-9.9996e+01 -7.9808e-04] to CCS.\n",
-      "removed value [-99.9956 -51.6448]\n",
-      "removed value [-9.9996e+01 -1.2951e-03]\n",
-      "W_corner: [array([1., 0.]), array([0., 1.])] W_corner size: 2\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04])] CCS size: 1\n",
-      "Next weight: [0. 1.]\n",
-      "Next weight vector: [0. 1.]\n",
-      "Adding value: [-9.9996e+01 -6.7070e-03] to CCS.\n",
-      "Adding value: [-99.9808 -47.8051] to CCS.\n",
-      "removed value [-9.9996e+01 -6.7070e-03]\n",
-      "Adding value: [-9.9996e+01 -8.7628e-03] to CCS.\n",
-      "Value [-9.9996e+01 -8.7628e-03] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([9.9969e-01, 3.0950e-04]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.9808, -47.8051])] CCS size: 2\n",
-      "Next weight: [1. 0.]\n",
-      "Next weight vector: [1. 0.]\n",
-      "Adding value: [-9.9996e+01 -1.9521e-02] to CCS.\n",
-      "Value [-9.9996e+01 -1.9521e-02] is dominated. Discarding.\n",
-      "Adding value: [-99.6818 -68.2385] to CCS.\n",
-      "removed value [-99.9808 -47.8051]\n",
-      "Adding value: [-99.9753 -65.719 ] to CCS.\n",
-      "Value [-99.9753 -65.719 ] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1421] to CCS.\n",
-      "Value [-99.9956  -0.1421] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.2368] to CCS.\n",
-      "Value [-99.9956 -64.2368] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
-      "Next weight: [0.9954 0.0046]\n",
-      "Next weight vector: [0.9954 0.0046]\n",
-      "Adding value: [-9.9996e+01 -4.8593e-02] to CCS.\n",
-      "Value [-9.9996e+01 -4.8593e-02] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.5916] to CCS.\n",
-      "Value [-99.9956 -64.5916] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1756] to CCS.\n",
-      "Value [-99.9956  -0.1756] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -66.1056] to CCS.\n",
-      "Value [-99.9956 -66.1056] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -65.9382] to CCS.\n",
-      "Value [-99.9956 -65.9382] is dominated. Discarding.\n",
-      "W_corner: [array([1., 0.]), array([0.9954, 0.0046]), array([0., 1.])] W_corner size: 3\n",
-      "CCS: [array([-9.9996e+01, -7.9808e-04]), array([-99.6818, -68.2385])] CCS size: 2\n",
-      "Next weight: [0.9954 0.0046]\n",
-      "Next weight vector: [0.9954 0.0046]\n",
-      "Adding value: [-99.9956  -0.1548] to CCS.\n",
-      "Value [-99.9956  -0.1548] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -64.2804] to CCS.\n",
-      "Value [-99.9956 -64.2804] is dominated. Discarding.\n",
-      "Adding value: [-99.9956  -0.1292] to CCS.\n",
-      "Value [-99.9956  -0.1292] is dominated. Discarding.\n",
-      "Adding value: [-99.9751 -64.9296] to CCS.\n",
-      "Value [-99.9751 -64.9296] is dominated. Discarding.\n",
-      "Adding value: [-99.9956 -65.9157] to CCS.\n",
-      "Value [-99.9956 -65.9157] is dominated. Discarding.\n"
-     ]
-    }
-   ],
    "source": [
-    "env = mo_gym.make('mo-mountaincarcontinuous-v0')\n",
-    "\n",
-    "GPIAgent = GPIPDContinuousAction(env=env, per=True, dyna=False, experiment_name='gpi-ls_cart')\n",
+    "## Testing GPI-ls on other environemnts\n",
     "\n",
-    "GPIAgent.train(100000, env, ref_point=np.array([0,0], dtype=np.float32))"
+    "Verify that we are in fact using the correct method for a continuous state MORL problem by training on the MO-hopper environment"
    ]
   },
   {
